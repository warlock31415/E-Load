
E-Load.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003d28  08003d28  00013d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d80  08003d80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d80  08003d80  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d80  08003d80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d80  08003d80  00013d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d84  08003d84  00013d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08003d94  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003d94  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc70  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000245f  00000000  00000000  0002fca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e28  00000000  00000000  00032108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d38  00000000  00000000  00032f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ab29  00000000  00000000  00033c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ce61  00000000  00000000  0004e791  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000911f0  00000000  00000000  0005b5f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ec7e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da8  00000000  00000000  000ec860  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d10 	.word	0x08003d10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003d10 	.word	0x08003d10

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__gedf2>:
 80004c4:	f04f 3cff 	mov.w	ip, #4294967295
 80004c8:	e006      	b.n	80004d8 <__cmpdf2+0x4>
 80004ca:	bf00      	nop

080004cc <__ledf2>:
 80004cc:	f04f 0c01 	mov.w	ip, #1
 80004d0:	e002      	b.n	80004d8 <__cmpdf2+0x4>
 80004d2:	bf00      	nop

080004d4 <__cmpdf2>:
 80004d4:	f04f 0c01 	mov.w	ip, #1
 80004d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004e8:	bf18      	it	ne
 80004ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004ee:	d01b      	beq.n	8000528 <__cmpdf2+0x54>
 80004f0:	b001      	add	sp, #4
 80004f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004f6:	bf0c      	ite	eq
 80004f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80004fc:	ea91 0f03 	teqne	r1, r3
 8000500:	bf02      	ittt	eq
 8000502:	ea90 0f02 	teqeq	r0, r2
 8000506:	2000      	moveq	r0, #0
 8000508:	4770      	bxeq	lr
 800050a:	f110 0f00 	cmn.w	r0, #0
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf58      	it	pl
 8000514:	4299      	cmppl	r1, r3
 8000516:	bf08      	it	eq
 8000518:	4290      	cmpeq	r0, r2
 800051a:	bf2c      	ite	cs
 800051c:	17d8      	asrcs	r0, r3, #31
 800051e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000522:	f040 0001 	orr.w	r0, r0, #1
 8000526:	4770      	bx	lr
 8000528:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800052c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000530:	d102      	bne.n	8000538 <__cmpdf2+0x64>
 8000532:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000536:	d107      	bne.n	8000548 <__cmpdf2+0x74>
 8000538:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800053c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000540:	d1d6      	bne.n	80004f0 <__cmpdf2+0x1c>
 8000542:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000546:	d0d3      	beq.n	80004f0 <__cmpdf2+0x1c>
 8000548:	f85d 0b04 	ldr.w	r0, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <__aeabi_cdrcmple>:
 8000550:	4684      	mov	ip, r0
 8000552:	4610      	mov	r0, r2
 8000554:	4662      	mov	r2, ip
 8000556:	468c      	mov	ip, r1
 8000558:	4619      	mov	r1, r3
 800055a:	4663      	mov	r3, ip
 800055c:	e000      	b.n	8000560 <__aeabi_cdcmpeq>
 800055e:	bf00      	nop

08000560 <__aeabi_cdcmpeq>:
 8000560:	b501      	push	{r0, lr}
 8000562:	f7ff ffb7 	bl	80004d4 <__cmpdf2>
 8000566:	2800      	cmp	r0, #0
 8000568:	bf48      	it	mi
 800056a:	f110 0f00 	cmnmi.w	r0, #0
 800056e:	bd01      	pop	{r0, pc}

08000570 <__aeabi_dcmpeq>:
 8000570:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000574:	f7ff fff4 	bl	8000560 <__aeabi_cdcmpeq>
 8000578:	bf0c      	ite	eq
 800057a:	2001      	moveq	r0, #1
 800057c:	2000      	movne	r0, #0
 800057e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000582:	bf00      	nop

08000584 <__aeabi_dcmplt>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff ffea 	bl	8000560 <__aeabi_cdcmpeq>
 800058c:	bf34      	ite	cc
 800058e:	2001      	movcc	r0, #1
 8000590:	2000      	movcs	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmple>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffe0 	bl	8000560 <__aeabi_cdcmpeq>
 80005a0:	bf94      	ite	ls
 80005a2:	2001      	movls	r0, #1
 80005a4:	2000      	movhi	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmpge>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffce 	bl	8000550 <__aeabi_cdrcmple>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpgt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffc4 	bl	8000550 <__aeabi_cdrcmple>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_frsub>:
 80005d4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005d8:	e002      	b.n	80005e0 <__addsf3>
 80005da:	bf00      	nop

080005dc <__aeabi_fsub>:
 80005dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005e0 <__addsf3>:
 80005e0:	0042      	lsls	r2, r0, #1
 80005e2:	bf1f      	itttt	ne
 80005e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005e8:	ea92 0f03 	teqne	r2, r3
 80005ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005f4:	d06a      	beq.n	80006cc <__addsf3+0xec>
 80005f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80005fe:	bfc1      	itttt	gt
 8000600:	18d2      	addgt	r2, r2, r3
 8000602:	4041      	eorgt	r1, r0
 8000604:	4048      	eorgt	r0, r1
 8000606:	4041      	eorgt	r1, r0
 8000608:	bfb8      	it	lt
 800060a:	425b      	neglt	r3, r3
 800060c:	2b19      	cmp	r3, #25
 800060e:	bf88      	it	hi
 8000610:	4770      	bxhi	lr
 8000612:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000616:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800061a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800061e:	bf18      	it	ne
 8000620:	4240      	negne	r0, r0
 8000622:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000626:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800062a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800062e:	bf18      	it	ne
 8000630:	4249      	negne	r1, r1
 8000632:	ea92 0f03 	teq	r2, r3
 8000636:	d03f      	beq.n	80006b8 <__addsf3+0xd8>
 8000638:	f1a2 0201 	sub.w	r2, r2, #1
 800063c:	fa41 fc03 	asr.w	ip, r1, r3
 8000640:	eb10 000c 	adds.w	r0, r0, ip
 8000644:	f1c3 0320 	rsb	r3, r3, #32
 8000648:	fa01 f103 	lsl.w	r1, r1, r3
 800064c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000650:	d502      	bpl.n	8000658 <__addsf3+0x78>
 8000652:	4249      	negs	r1, r1
 8000654:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000658:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800065c:	d313      	bcc.n	8000686 <__addsf3+0xa6>
 800065e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000662:	d306      	bcc.n	8000672 <__addsf3+0x92>
 8000664:	0840      	lsrs	r0, r0, #1
 8000666:	ea4f 0131 	mov.w	r1, r1, rrx
 800066a:	f102 0201 	add.w	r2, r2, #1
 800066e:	2afe      	cmp	r2, #254	; 0xfe
 8000670:	d251      	bcs.n	8000716 <__addsf3+0x136>
 8000672:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000676:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800067a:	bf08      	it	eq
 800067c:	f020 0001 	biceq.w	r0, r0, #1
 8000680:	ea40 0003 	orr.w	r0, r0, r3
 8000684:	4770      	bx	lr
 8000686:	0049      	lsls	r1, r1, #1
 8000688:	eb40 0000 	adc.w	r0, r0, r0
 800068c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000690:	f1a2 0201 	sub.w	r2, r2, #1
 8000694:	d1ed      	bne.n	8000672 <__addsf3+0x92>
 8000696:	fab0 fc80 	clz	ip, r0
 800069a:	f1ac 0c08 	sub.w	ip, ip, #8
 800069e:	ebb2 020c 	subs.w	r2, r2, ip
 80006a2:	fa00 f00c 	lsl.w	r0, r0, ip
 80006a6:	bfaa      	itet	ge
 80006a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006ac:	4252      	neglt	r2, r2
 80006ae:	4318      	orrge	r0, r3
 80006b0:	bfbc      	itt	lt
 80006b2:	40d0      	lsrlt	r0, r2
 80006b4:	4318      	orrlt	r0, r3
 80006b6:	4770      	bx	lr
 80006b8:	f092 0f00 	teq	r2, #0
 80006bc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80006c0:	bf06      	itte	eq
 80006c2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80006c6:	3201      	addeq	r2, #1
 80006c8:	3b01      	subne	r3, #1
 80006ca:	e7b5      	b.n	8000638 <__addsf3+0x58>
 80006cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006d4:	bf18      	it	ne
 80006d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006da:	d021      	beq.n	8000720 <__addsf3+0x140>
 80006dc:	ea92 0f03 	teq	r2, r3
 80006e0:	d004      	beq.n	80006ec <__addsf3+0x10c>
 80006e2:	f092 0f00 	teq	r2, #0
 80006e6:	bf08      	it	eq
 80006e8:	4608      	moveq	r0, r1
 80006ea:	4770      	bx	lr
 80006ec:	ea90 0f01 	teq	r0, r1
 80006f0:	bf1c      	itt	ne
 80006f2:	2000      	movne	r0, #0
 80006f4:	4770      	bxne	lr
 80006f6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80006fa:	d104      	bne.n	8000706 <__addsf3+0x126>
 80006fc:	0040      	lsls	r0, r0, #1
 80006fe:	bf28      	it	cs
 8000700:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000704:	4770      	bx	lr
 8000706:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800070a:	bf3c      	itt	cc
 800070c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000710:	4770      	bxcc	lr
 8000712:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000716:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800071a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800071e:	4770      	bx	lr
 8000720:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000724:	bf16      	itet	ne
 8000726:	4608      	movne	r0, r1
 8000728:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800072c:	4601      	movne	r1, r0
 800072e:	0242      	lsls	r2, r0, #9
 8000730:	bf06      	itte	eq
 8000732:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000736:	ea90 0f01 	teqeq	r0, r1
 800073a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800073e:	4770      	bx	lr

08000740 <__aeabi_ui2f>:
 8000740:	f04f 0300 	mov.w	r3, #0
 8000744:	e004      	b.n	8000750 <__aeabi_i2f+0x8>
 8000746:	bf00      	nop

08000748 <__aeabi_i2f>:
 8000748:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800074c:	bf48      	it	mi
 800074e:	4240      	negmi	r0, r0
 8000750:	ea5f 0c00 	movs.w	ip, r0
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800075c:	4601      	mov	r1, r0
 800075e:	f04f 0000 	mov.w	r0, #0
 8000762:	e01c      	b.n	800079e <__aeabi_l2f+0x2a>

08000764 <__aeabi_ul2f>:
 8000764:	ea50 0201 	orrs.w	r2, r0, r1
 8000768:	bf08      	it	eq
 800076a:	4770      	bxeq	lr
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	e00a      	b.n	8000788 <__aeabi_l2f+0x14>
 8000772:	bf00      	nop

08000774 <__aeabi_l2f>:
 8000774:	ea50 0201 	orrs.w	r2, r0, r1
 8000778:	bf08      	it	eq
 800077a:	4770      	bxeq	lr
 800077c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000780:	d502      	bpl.n	8000788 <__aeabi_l2f+0x14>
 8000782:	4240      	negs	r0, r0
 8000784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000788:	ea5f 0c01 	movs.w	ip, r1
 800078c:	bf02      	ittt	eq
 800078e:	4684      	moveq	ip, r0
 8000790:	4601      	moveq	r1, r0
 8000792:	2000      	moveq	r0, #0
 8000794:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000798:	bf08      	it	eq
 800079a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800079e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007a2:	fabc f28c 	clz	r2, ip
 80007a6:	3a08      	subs	r2, #8
 80007a8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007ac:	db10      	blt.n	80007d0 <__aeabi_l2f+0x5c>
 80007ae:	fa01 fc02 	lsl.w	ip, r1, r2
 80007b2:	4463      	add	r3, ip
 80007b4:	fa00 fc02 	lsl.w	ip, r0, r2
 80007b8:	f1c2 0220 	rsb	r2, r2, #32
 80007bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007c0:	fa20 f202 	lsr.w	r2, r0, r2
 80007c4:	eb43 0002 	adc.w	r0, r3, r2
 80007c8:	bf08      	it	eq
 80007ca:	f020 0001 	biceq.w	r0, r0, #1
 80007ce:	4770      	bx	lr
 80007d0:	f102 0220 	add.w	r2, r2, #32
 80007d4:	fa01 fc02 	lsl.w	ip, r1, r2
 80007d8:	f1c2 0220 	rsb	r2, r2, #32
 80007dc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007e0:	fa21 f202 	lsr.w	r2, r1, r2
 80007e4:	eb43 0002 	adc.w	r0, r3, r2
 80007e8:	bf08      	it	eq
 80007ea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007ee:	4770      	bx	lr

080007f0 <__aeabi_fmul>:
 80007f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007f8:	bf1e      	ittt	ne
 80007fa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80007fe:	ea92 0f0c 	teqne	r2, ip
 8000802:	ea93 0f0c 	teqne	r3, ip
 8000806:	d06f      	beq.n	80008e8 <__aeabi_fmul+0xf8>
 8000808:	441a      	add	r2, r3
 800080a:	ea80 0c01 	eor.w	ip, r0, r1
 800080e:	0240      	lsls	r0, r0, #9
 8000810:	bf18      	it	ne
 8000812:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000816:	d01e      	beq.n	8000856 <__aeabi_fmul+0x66>
 8000818:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800081c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000820:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000824:	fba0 3101 	umull	r3, r1, r0, r1
 8000828:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800082c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000830:	bf3e      	ittt	cc
 8000832:	0049      	lslcc	r1, r1, #1
 8000834:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000838:	005b      	lslcc	r3, r3, #1
 800083a:	ea40 0001 	orr.w	r0, r0, r1
 800083e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000842:	2afd      	cmp	r2, #253	; 0xfd
 8000844:	d81d      	bhi.n	8000882 <__aeabi_fmul+0x92>
 8000846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800084a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800084e:	bf08      	it	eq
 8000850:	f020 0001 	biceq.w	r0, r0, #1
 8000854:	4770      	bx	lr
 8000856:	f090 0f00 	teq	r0, #0
 800085a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800085e:	bf08      	it	eq
 8000860:	0249      	lsleq	r1, r1, #9
 8000862:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000866:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800086a:	3a7f      	subs	r2, #127	; 0x7f
 800086c:	bfc2      	ittt	gt
 800086e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000872:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000876:	4770      	bxgt	lr
 8000878:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800087c:	f04f 0300 	mov.w	r3, #0
 8000880:	3a01      	subs	r2, #1
 8000882:	dc5d      	bgt.n	8000940 <__aeabi_fmul+0x150>
 8000884:	f112 0f19 	cmn.w	r2, #25
 8000888:	bfdc      	itt	le
 800088a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800088e:	4770      	bxle	lr
 8000890:	f1c2 0200 	rsb	r2, r2, #0
 8000894:	0041      	lsls	r1, r0, #1
 8000896:	fa21 f102 	lsr.w	r1, r1, r2
 800089a:	f1c2 0220 	rsb	r2, r2, #32
 800089e:	fa00 fc02 	lsl.w	ip, r0, r2
 80008a2:	ea5f 0031 	movs.w	r0, r1, rrx
 80008a6:	f140 0000 	adc.w	r0, r0, #0
 80008aa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008ae:	bf08      	it	eq
 80008b0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008b4:	4770      	bx	lr
 80008b6:	f092 0f00 	teq	r2, #0
 80008ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80008be:	bf02      	ittt	eq
 80008c0:	0040      	lsleq	r0, r0, #1
 80008c2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80008c6:	3a01      	subeq	r2, #1
 80008c8:	d0f9      	beq.n	80008be <__aeabi_fmul+0xce>
 80008ca:	ea40 000c 	orr.w	r0, r0, ip
 80008ce:	f093 0f00 	teq	r3, #0
 80008d2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008d6:	bf02      	ittt	eq
 80008d8:	0049      	lsleq	r1, r1, #1
 80008da:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80008de:	3b01      	subeq	r3, #1
 80008e0:	d0f9      	beq.n	80008d6 <__aeabi_fmul+0xe6>
 80008e2:	ea41 010c 	orr.w	r1, r1, ip
 80008e6:	e78f      	b.n	8000808 <__aeabi_fmul+0x18>
 80008e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008ec:	ea92 0f0c 	teq	r2, ip
 80008f0:	bf18      	it	ne
 80008f2:	ea93 0f0c 	teqne	r3, ip
 80008f6:	d00a      	beq.n	800090e <__aeabi_fmul+0x11e>
 80008f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80008fc:	bf18      	it	ne
 80008fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000902:	d1d8      	bne.n	80008b6 <__aeabi_fmul+0xc6>
 8000904:	ea80 0001 	eor.w	r0, r0, r1
 8000908:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800090c:	4770      	bx	lr
 800090e:	f090 0f00 	teq	r0, #0
 8000912:	bf17      	itett	ne
 8000914:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000918:	4608      	moveq	r0, r1
 800091a:	f091 0f00 	teqne	r1, #0
 800091e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000922:	d014      	beq.n	800094e <__aeabi_fmul+0x15e>
 8000924:	ea92 0f0c 	teq	r2, ip
 8000928:	d101      	bne.n	800092e <__aeabi_fmul+0x13e>
 800092a:	0242      	lsls	r2, r0, #9
 800092c:	d10f      	bne.n	800094e <__aeabi_fmul+0x15e>
 800092e:	ea93 0f0c 	teq	r3, ip
 8000932:	d103      	bne.n	800093c <__aeabi_fmul+0x14c>
 8000934:	024b      	lsls	r3, r1, #9
 8000936:	bf18      	it	ne
 8000938:	4608      	movne	r0, r1
 800093a:	d108      	bne.n	800094e <__aeabi_fmul+0x15e>
 800093c:	ea80 0001 	eor.w	r0, r0, r1
 8000940:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000944:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000948:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800094c:	4770      	bx	lr
 800094e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000952:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000956:	4770      	bx	lr

08000958 <__aeabi_fdiv>:
 8000958:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800095c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000960:	bf1e      	ittt	ne
 8000962:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000966:	ea92 0f0c 	teqne	r2, ip
 800096a:	ea93 0f0c 	teqne	r3, ip
 800096e:	d069      	beq.n	8000a44 <__aeabi_fdiv+0xec>
 8000970:	eba2 0203 	sub.w	r2, r2, r3
 8000974:	ea80 0c01 	eor.w	ip, r0, r1
 8000978:	0249      	lsls	r1, r1, #9
 800097a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800097e:	d037      	beq.n	80009f0 <__aeabi_fdiv+0x98>
 8000980:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000984:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000988:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800098c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000990:	428b      	cmp	r3, r1
 8000992:	bf38      	it	cc
 8000994:	005b      	lslcc	r3, r3, #1
 8000996:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800099a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800099e:	428b      	cmp	r3, r1
 80009a0:	bf24      	itt	cs
 80009a2:	1a5b      	subcs	r3, r3, r1
 80009a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009ac:	bf24      	itt	cs
 80009ae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009b2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009ba:	bf24      	itt	cs
 80009bc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80009c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80009c8:	bf24      	itt	cs
 80009ca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009ce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d2:	011b      	lsls	r3, r3, #4
 80009d4:	bf18      	it	ne
 80009d6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009da:	d1e0      	bne.n	800099e <__aeabi_fdiv+0x46>
 80009dc:	2afd      	cmp	r2, #253	; 0xfd
 80009de:	f63f af50 	bhi.w	8000882 <__aeabi_fmul+0x92>
 80009e2:	428b      	cmp	r3, r1
 80009e4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e8:	bf08      	it	eq
 80009ea:	f020 0001 	biceq.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009f4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009f8:	327f      	adds	r2, #127	; 0x7f
 80009fa:	bfc2      	ittt	gt
 80009fc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a00:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a04:	4770      	bxgt	lr
 8000a06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a0a:	f04f 0300 	mov.w	r3, #0
 8000a0e:	3a01      	subs	r2, #1
 8000a10:	e737      	b.n	8000882 <__aeabi_fmul+0x92>
 8000a12:	f092 0f00 	teq	r2, #0
 8000a16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a1a:	bf02      	ittt	eq
 8000a1c:	0040      	lsleq	r0, r0, #1
 8000a1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a22:	3a01      	subeq	r2, #1
 8000a24:	d0f9      	beq.n	8000a1a <__aeabi_fdiv+0xc2>
 8000a26:	ea40 000c 	orr.w	r0, r0, ip
 8000a2a:	f093 0f00 	teq	r3, #0
 8000a2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a32:	bf02      	ittt	eq
 8000a34:	0049      	lsleq	r1, r1, #1
 8000a36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a3a:	3b01      	subeq	r3, #1
 8000a3c:	d0f9      	beq.n	8000a32 <__aeabi_fdiv+0xda>
 8000a3e:	ea41 010c 	orr.w	r1, r1, ip
 8000a42:	e795      	b.n	8000970 <__aeabi_fdiv+0x18>
 8000a44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a48:	ea92 0f0c 	teq	r2, ip
 8000a4c:	d108      	bne.n	8000a60 <__aeabi_fdiv+0x108>
 8000a4e:	0242      	lsls	r2, r0, #9
 8000a50:	f47f af7d 	bne.w	800094e <__aeabi_fmul+0x15e>
 8000a54:	ea93 0f0c 	teq	r3, ip
 8000a58:	f47f af70 	bne.w	800093c <__aeabi_fmul+0x14c>
 8000a5c:	4608      	mov	r0, r1
 8000a5e:	e776      	b.n	800094e <__aeabi_fmul+0x15e>
 8000a60:	ea93 0f0c 	teq	r3, ip
 8000a64:	d104      	bne.n	8000a70 <__aeabi_fdiv+0x118>
 8000a66:	024b      	lsls	r3, r1, #9
 8000a68:	f43f af4c 	beq.w	8000904 <__aeabi_fmul+0x114>
 8000a6c:	4608      	mov	r0, r1
 8000a6e:	e76e      	b.n	800094e <__aeabi_fmul+0x15e>
 8000a70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a74:	bf18      	it	ne
 8000a76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a7a:	d1ca      	bne.n	8000a12 <__aeabi_fdiv+0xba>
 8000a7c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a80:	f47f af5c 	bne.w	800093c <__aeabi_fmul+0x14c>
 8000a84:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a88:	f47f af3c 	bne.w	8000904 <__aeabi_fmul+0x114>
 8000a8c:	e75f      	b.n	800094e <__aeabi_fmul+0x15e>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_f2uiz>:
 8000a90:	0042      	lsls	r2, r0, #1
 8000a92:	d20e      	bcs.n	8000ab2 <__aeabi_f2uiz+0x22>
 8000a94:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a98:	d30b      	bcc.n	8000ab2 <__aeabi_f2uiz+0x22>
 8000a9a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a9e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000aa2:	d409      	bmi.n	8000ab8 <__aeabi_f2uiz+0x28>
 8000aa4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000aa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aac:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr
 8000ab8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000abc:	d101      	bne.n	8000ac2 <__aeabi_f2uiz+0x32>
 8000abe:	0242      	lsls	r2, r0, #9
 8000ac0:	d102      	bne.n	8000ac8 <__aeabi_f2uiz+0x38>
 8000ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <_ZN3ADCC1E19__ADC_HandleTypeDef>:
 *  Created on: Oct 28, 2020
 *      Author: prati
 */
#include "../Inc/ADC.hpp"

ADC::ADC(ADC_HandleTypeDef hadc1)
 8000ad0:	b084      	sub	sp, #16
 8000ad2:	b5b0      	push	{r4, r5, r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	f107 001c 	add.w	r0, r7, #28
 8000ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	f04f 0300 	mov.w	r3, #0
 8000ae8:	f04f 0400 	mov.w	r4, #0
 8000aec:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <_ZN3ADCC1E19__ADC_HandleTypeDef+0x60>)
 8000af4:	641a      	str	r2, [r3, #64]	; 0x40
{
	this->hadc = hadc1;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	1d1c      	adds	r4, r3, #4
 8000afa:	f107 051c 	add.w	r5, r7, #28
 8000afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	this->ADC_Error = HAL_ADCEx_Calibration_Start(&hadc);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3304      	adds	r3, #4
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 f956 	bl	8001dc4 <HAL_ADCEx_Calibration_Start>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	701a      	strb	r2, [r3, #0]
}
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr
 8000b30:	3a533333 	.word	0x3a533333

08000b34 <_ZN3ADC12ADC_getValueEv>:

double ADC::ADC_getValue()
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3304      	adds	r3, #4
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 fe07 	bl	8001754 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	f04f 31ff 	mov.w	r1, #4294967295
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 feae 	bl	80018b0 <HAL_ADC_PollForConversion>
	ADC_Val = HAL_ADC_GetValue(&hadc) * this->conversion_factor;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3304      	adds	r3, #4
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 ffa3 	bl	8001aa4 <HAL_ADC_GetValue>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fded 	bl	8000740 <__aeabi_ui2f>
 8000b66:	4602      	mov	r2, r0
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4610      	mov	r0, r2
 8000b70:	f7ff fe3e 	bl	80007f0 <__aeabi_fmul>
 8000b74:	4603      	mov	r3, r0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fc4c 	bl	8000414 <__aeabi_f2d>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	460c      	mov	r4, r1
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	return ADC_Val;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8000b8c:	e9d4 3400 	ldrd	r3, r4, [r4]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	4621      	mov	r1, r4
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd90      	pop	{r4, r7, pc}
	...

08000b9c <_ZN10AllButtons11readButtonsEP7buttons>:
 */

#include "../Inc/Buttons.hpp"

	void AllButtons::readButtons(struct buttons *b)
	{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]

		this->A_down = !HAL_GPIO_ReadPin(A_GPIO_Port, A_Pin);
 8000ba6:	2120      	movs	r1, #32
 8000ba8:	4815      	ldr	r0, [pc, #84]	; (8000c00 <_ZN10AllButtons11readButtonsEP7buttons+0x64>)
 8000baa:	f001 fbe5 	bl	8002378 <HAL_GPIO_ReadPin>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	bf0c      	ite	eq
 8000bb4:	2301      	moveq	r3, #1
 8000bb6:	2300      	movne	r3, #0
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	701a      	strb	r2, [r3, #0]

		this->B_down = !HAL_GPIO_ReadPin(B_GPIO_Port, B_Pin);
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	480f      	ldr	r0, [pc, #60]	; (8000c00 <_ZN10AllButtons11readButtonsEP7buttons+0x64>)
 8000bc2:	f001 fbd9 	bl	8002378 <HAL_GPIO_ReadPin>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	bf0c      	ite	eq
 8000bcc:	2301      	moveq	r3, #1
 8000bce:	2300      	movne	r3, #0
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	705a      	strb	r2, [r3, #1]

		this->C_down = !HAL_GPIO_ReadPin(C_GPIO_Port, C_Pin);
 8000bd6:	2180      	movs	r1, #128	; 0x80
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <_ZN10AllButtons11readButtonsEP7buttons+0x64>)
 8000bda:	f001 fbcd 	bl	8002378 <HAL_GPIO_ReadPin>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	bf0c      	ite	eq
 8000be4:	2301      	moveq	r3, #1
 8000be6:	2300      	movne	r3, #0
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	709a      	strb	r2, [r3, #2]


		this->checkToggle(b);
 8000bee:	6839      	ldr	r1, [r7, #0]
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 f807 	bl	8000c04 <_ZN10AllButtons11checkToggleEP7buttons>
	}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40010800 	.word	0x40010800

08000c04 <_ZN10AllButtons11checkToggleEP7buttons>:

	void AllButtons::checkToggle(struct buttons *b)
	{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
		if(this->A_prev != this->A_down) // If the previous state is not the same as the current one
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	78da      	ldrb	r2, [r3, #3]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d014      	beq.n	8000c44 <_ZN10AllButtons11checkToggleEP7buttons+0x40>
		{								 // Increment a counter. This ensures that only 1 button press is registered per state change
			A_count++;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	799b      	ldrb	r3, [r3, #6]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	719a      	strb	r2, [r3, #6]
			if(A_count == 2)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	799b      	ldrb	r3, [r3, #6]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d105      	bne.n	8000c3a <_ZN10AllButtons11checkToggleEP7buttons+0x36>
			{

				b->A = true;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]
				A_count = 0;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	719a      	strb	r2, [r3, #6]
			}
			this->A_prev = this->A_down;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	781a      	ldrb	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	70da      	strb	r2, [r3, #3]
 8000c42:	e002      	b.n	8000c4a <_ZN10AllButtons11checkToggleEP7buttons+0x46>
		}
		else
			b->A = false;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]

		if(this->B_prev != this->B_down)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	791a      	ldrb	r2, [r3, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	785b      	ldrb	r3, [r3, #1]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d014      	beq.n	8000c80 <_ZN10AllButtons11checkToggleEP7buttons+0x7c>
		{
			B_count++;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	79db      	ldrb	r3, [r3, #7]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	71da      	strb	r2, [r3, #7]
			if(B_count == 2)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	79db      	ldrb	r3, [r3, #7]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d105      	bne.n	8000c76 <_ZN10AllButtons11checkToggleEP7buttons+0x72>
			{

				b->B = true;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	705a      	strb	r2, [r3, #1]
				B_count = 0;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	71da      	strb	r2, [r3, #7]
			}
			this->B_prev = this->B_down;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	785a      	ldrb	r2, [r3, #1]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	711a      	strb	r2, [r3, #4]
 8000c7e:	e002      	b.n	8000c86 <_ZN10AllButtons11checkToggleEP7buttons+0x82>
		}
		else
			b->B = false;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	2200      	movs	r2, #0
 8000c84:	705a      	strb	r2, [r3, #1]

		if(this->C_prev != this->C_down)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	795a      	ldrb	r2, [r3, #5]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	789b      	ldrb	r3, [r3, #2]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d014      	beq.n	8000cbc <_ZN10AllButtons11checkToggleEP7buttons+0xb8>
		{
			C_count++;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	7a1b      	ldrb	r3, [r3, #8]
 8000c96:	3301      	adds	r3, #1
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	721a      	strb	r2, [r3, #8]
			if(C_count == 2)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	7a1b      	ldrb	r3, [r3, #8]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d105      	bne.n	8000cb2 <_ZN10AllButtons11checkToggleEP7buttons+0xae>
			{

				b->C = true;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	709a      	strb	r2, [r3, #2]
				C_count = 0;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	721a      	strb	r2, [r3, #8]
			}
			this->C_prev = this->C_down;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	789a      	ldrb	r2, [r3, #2]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	715a      	strb	r2, [r3, #5]
		}
		else
			b->C = false;


	}
 8000cba:	e002      	b.n	8000cc2 <_ZN10AllButtons11checkToggleEP7buttons+0xbe>
			b->C = false;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	709a      	strb	r2, [r3, #2]
	}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f002 ffbf 	bl	8003c58 <roundf>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <_ZN3DACC1E17I2C_HandleTypeDefh>:
 *      Author: prati
 */

#include"../Inc/DAC.hpp"

DAC::DAC(I2C_HandleTypeDef hi2c1,uint8_t addr)
 8000ce4:	b084      	sub	sp, #16
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	f107 0014 	add.w	r0, r7, #20
 8000cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <_ZN3DACC1E17I2C_HandleTypeDefh+0x60>)
 8000cfa:	65da      	str	r2, [r3, #92]	; 0x5c
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <_ZN3DACC1E17I2C_HandleTypeDefh+0x64>)
 8000d00:	661a      	str	r2, [r3, #96]	; 0x60
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
{
	hi2c = hi2c1;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3304      	adds	r3, #4
 8000d16:	f107 0114 	add.w	r1, r7, #20
 8000d1a:	2254      	movs	r2, #84	; 0x54
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f002 ffe3 	bl	8003ce8 <memcpy>
	DAC_Addr = addr;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8000d28:	701a      	strb	r2, [r3, #0]
	this->state = NORMAL;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d3e:	b004      	add	sp, #16
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40533333 	.word	0x40533333
 8000d48:	449b1d17 	.word	0x449b1d17

08000d4c <_ZN3DAC8setValueEf>:

HAL_StatusTypeDef DAC::setValue(float output)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af02      	add	r7, sp, #8
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]

	this->value = round(output * this->conv_factor); // map to 12-bit binary
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5a:	6839      	ldr	r1, [r7, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fd47 	bl	80007f0 <__aeabi_fmul>
 8000d62:	4603      	mov	r3, r0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ffb1 	bl	8000ccc <_ZSt5roundf>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fe8f 	bl	8000a90 <__aeabi_f2uiz>
 8000d72:	4603      	mov	r3, r0
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	checkLimits();									 // Make sure value doesn't exceed max
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f000 f831 	bl	8000de4 <_ZN3DAC11checkLimitsEv>
	this->value = this->state<<12 | this->value; 	 // Mode is bit 13 and 14
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8000d88:	031b      	lsls	r3, r3, #12
 8000d8a:	b21a      	sxth	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8000d92:	b21b      	sxth	r3, r3
 8000d94:	4313      	orrs	r3, r2
 8000d96:	b21b      	sxth	r3, r3
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	this->output_buf[0] = this->value >> 8;			 // Load high byte
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8000da6:	121b      	asrs	r3, r3, #8
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	this->output_buf[1] = this->value;				 // Load low byte
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	return HAL_I2C_Master_Transmit(&hi2c, DAC_Addr, output_buf, sizeof(output_buf), HAL_MAX_DELAY);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	1d18      	adds	r0, r3, #4
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	b299      	uxth	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	f001 fc4f 	bl	8002678 <HAL_I2C_Master_Transmit>
 8000dda:	4603      	mov	r3, r0

}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_ZN3DAC11checkLimitsEv>:

void DAC::checkLimits()
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	if(this->value > 4095)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8000df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000df6:	d304      	bcc.n	8000e02 <_ZN3DAC11checkLimitsEv+0x1e>
		this-> value = 4095;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000dfe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	else if(this->value < 0)
		this->value = 0;
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <_ZN10AllButtonsC1Ev>:
	bool B = false;
	bool C = false;
};


	class AllButtons
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	719a      	strb	r2, [r3, #6]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	71da      	strb	r2, [r3, #7]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	721a      	strb	r2, [r3, #8]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
	...

08000e34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e36:	b0c9      	sub	sp, #292	; 0x124
 8000e38:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3a:	f000 fb51 	bl	80014e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e3e:	f000 f891 	bl	8000f64 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e42:	f000 f9cb 	bl	80011dc <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8000e46:	f000 f8ed 	bl	8001024 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 8000e4a:	f000 f933 	bl	80010b4 <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 8000e4e:	f000 f965 	bl	800111c <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */
  AllButtons Butt;
 8000e52:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ffd8 	bl	8000e0c <_ZN10AllButtonsC1Ev>
  ADC Adc(hadc1);
 8000e5c:	4e3d      	ldr	r6, [pc, #244]	; (8000f54 <main+0x120>)
 8000e5e:	f107 0c70 	add.w	ip, r7, #112	; 0x70
 8000e62:	466d      	mov	r5, sp
 8000e64:	f106 040c 	add.w	r4, r6, #12
 8000e68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e70:	6823      	ldr	r3, [r4, #0]
 8000e72:	602b      	str	r3, [r5, #0]
 8000e74:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000e78:	4660      	mov	r0, ip
 8000e7a:	f7ff fe29 	bl	8000ad0 <_ZN3ADCC1E19__ADC_HandleTypeDef>
  if(Adc.ADC_Error != HAL_OK)
 8000e7e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <main+0x56>
  {
	  Error_Handler();
 8000e86:	f000 f9f7 	bl	8001278 <Error_Handler>
  }
  double raw = 0;
 8000e8a:	f04f 0300 	mov.w	r3, #0
 8000e8e:	f04f 0400 	mov.w	r4, #0
 8000e92:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8



  buttons butt;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eae:	482a      	ldr	r0, [pc, #168]	; (8000f58 <main+0x124>)
 8000eb0:	f001 fa79 	bl	80023a6 <HAL_GPIO_WritePin>

  static const uint8_t DAC_ADDR = 0b0001100<<1; // Need to shift to the left. Bit 0 is R/W bit

  DAC Dac(hi2c1,DAC_ADDR);
 8000eb4:	4c29      	ldr	r4, [pc, #164]	; (8000f5c <main+0x128>)
 8000eb6:	1d3d      	adds	r5, r7, #4
 8000eb8:	2318      	movs	r3, #24
 8000eba:	9312      	str	r3, [sp, #72]	; 0x48
 8000ebc:	4668      	mov	r0, sp
 8000ebe:	f104 030c 	add.w	r3, r4, #12
 8000ec2:	2248      	movs	r2, #72	; 0x48
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f002 ff0f 	bl	8003ce8 <memcpy>
 8000eca:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000ece:	4628      	mov	r0, r5
 8000ed0:	f7ff ff08 	bl	8000ce4 <_ZN3DACC1E17I2C_HandleTypeDefh>
  HAL_StatusTypeDef ret = HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Butt.readButtons(&butt);
 8000eda:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8000ede:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fe59 	bl	8000b9c <_ZN10AllButtons11readButtonsEP7buttons>

	if (butt.A == true || butt.B == true || butt.C == true)
 8000eea:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d107      	bne.n	8000f02 <main+0xce>
 8000ef2:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d103      	bne.n	8000f02 <main+0xce>
 8000efa:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d004      	beq.n	8000f0c <main+0xd8>
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000f02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f06:	4814      	ldr	r0, [pc, #80]	; (8000f58 <main+0x124>)
 8000f08:	f001 fa65 	bl	80023d6 <HAL_GPIO_TogglePin>
	}

	raw = Adc.ADC_getValue();
 8000f0c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fe0f 	bl	8000b34 <_ZN3ADC12ADC_getValueEv>
 8000f16:	e9c7 0132 	strd	r0, r1, [r7, #200]	; 0xc8
	if(raw <= 0)
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8000f26:	f7ff fb37 	bl	8000598 <__aeabi_dcmple>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <main+0x100>
	{
		Error_Handler();
 8000f30:	f000 f9a2 	bl	8001278 <Error_Handler>
	}


	ret = Dac.setValue(5);
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	490a      	ldr	r1, [pc, #40]	; (8000f60 <main+0x12c>)
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff07 	bl	8000d4c <_ZN3DAC8setValueEf>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	if(ret != HAL_OK)
 8000f44:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0c6      	beq.n	8000eda <main+0xa6>
	{
		Error_Handler();
 8000f4c:	f000 f994 	bl	8001278 <Error_Handler>
	Butt.readButtons(&butt);
 8000f50:	e7c3      	b.n	8000eda <main+0xa6>
 8000f52:	bf00      	nop
 8000f54:	20000028 	.word	0x20000028
 8000f58:	40010c00 	.word	0x40010c00
 8000f5c:	20000058 	.word	0x20000058
 8000f60:	40a00000 	.word	0x40a00000

08000f64 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b094      	sub	sp, #80	; 0x50
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f6e:	2228      	movs	r2, #40	; 0x28
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 fec3 	bl	8003cfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f94:	2302      	movs	r3, #2
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f9c:	2310      	movs	r3, #16
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f001 fe6b 	bl	8002c84 <HAL_RCC_OscConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	bf14      	ite	ne
 8000fb4:	2301      	movne	r3, #1
 8000fb6:	2300      	moveq	r3, #0
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 8000fbe:	f000 f95b 	bl	8001278 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f002 f8d1 	bl	8003184 <HAL_RCC_ClockConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	bf14      	ite	ne
 8000fe8:	2301      	movne	r3, #1
 8000fea:	2300      	moveq	r3, #0
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 8000ff2:	f000 f941 	bl	8001278 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	4618      	mov	r0, r3
 8001002:	f002 fa5b 	bl	80034bc <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	bf14      	ite	ne
 800100c:	2301      	movne	r3, #1
 800100e:	2300      	moveq	r3, #0
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8001016:	f000 f92f 	bl	8001278 <Error_Handler>
  }
}
 800101a:	bf00      	nop
 800101c:	3750      	adds	r7, #80	; 0x50
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <_ZL12MX_ADC1_Initv+0x88>)
 8001036:	4a1e      	ldr	r2, [pc, #120]	; (80010b0 <_ZL12MX_ADC1_Initv+0x8c>)
 8001038:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <_ZL12MX_ADC1_Initv+0x88>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <_ZL12MX_ADC1_Initv+0x88>)
 8001042:	2200      	movs	r2, #0
 8001044:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <_ZL12MX_ADC1_Initv+0x88>)
 8001048:	2200      	movs	r2, #0
 800104a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <_ZL12MX_ADC1_Initv+0x88>)
 800104e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001052:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <_ZL12MX_ADC1_Initv+0x88>)
 8001056:	2200      	movs	r2, #0
 8001058:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <_ZL12MX_ADC1_Initv+0x88>)
 800105c:	2201      	movs	r2, #1
 800105e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001060:	4812      	ldr	r0, [pc, #72]	; (80010ac <_ZL12MX_ADC1_Initv+0x88>)
 8001062:	f000 fa9f 	bl	80015a4 <HAL_ADC_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	bf14      	ite	ne
 800106c:	2301      	movne	r3, #1
 800106e:	2300      	moveq	r3, #0
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 8001076:	f000 f8ff 	bl	8001278 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800107e:	2301      	movs	r3, #1
 8001080:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4808      	ldr	r0, [pc, #32]	; (80010ac <_ZL12MX_ADC1_Initv+0x88>)
 800108c:	f000 fd16 	bl	8001abc <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	bf14      	ite	ne
 8001096:	2301      	movne	r3, #1
 8001098:	2300      	moveq	r3, #0
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 80010a0:	f000 f8ea 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000028 	.word	0x20000028
 80010b0:	40012400 	.word	0x40012400

080010b4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <_ZL12MX_I2C1_Initv+0x5c>)
 80010ba:	4a16      	ldr	r2, [pc, #88]	; (8001114 <_ZL12MX_I2C1_Initv+0x60>)
 80010bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <_ZL12MX_I2C1_Initv+0x5c>)
 80010c0:	4a15      	ldr	r2, [pc, #84]	; (8001118 <_ZL12MX_I2C1_Initv+0x64>)
 80010c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <_ZL12MX_I2C1_Initv+0x5c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <_ZL12MX_I2C1_Initv+0x5c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <_ZL12MX_I2C1_Initv+0x5c>)
 80010d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d8:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <_ZL12MX_I2C1_Initv+0x5c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <_ZL12MX_I2C1_Initv+0x5c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <_ZL12MX_I2C1_Initv+0x5c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <_ZL12MX_I2C1_Initv+0x5c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010f0:	4807      	ldr	r0, [pc, #28]	; (8001110 <_ZL12MX_I2C1_Initv+0x5c>)
 80010f2:	f001 f989 	bl	8002408 <HAL_I2C_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	bf14      	ite	ne
 80010fc:	2301      	movne	r3, #1
 80010fe:	2300      	moveq	r3, #0
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001106:	f000 f8b7 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000058 	.word	0x20000058
 8001114:	40005400 	.word	0x40005400
 8001118:	000186a0 	.word	0x000186a0

0800111c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	463b      	mov	r3, r7
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001138:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <_ZL12MX_TIM1_Initv+0xb8>)
 800113a:	4a27      	ldr	r2, [pc, #156]	; (80011d8 <_ZL12MX_TIM1_Initv+0xbc>)
 800113c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 800113e:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <_ZL12MX_TIM1_Initv+0xb8>)
 8001140:	2210      	movs	r2, #16
 8001142:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001144:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <_ZL12MX_TIM1_Initv+0xb8>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800114a:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <_ZL12MX_TIM1_Initv+0xb8>)
 800114c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001150:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <_ZL12MX_TIM1_Initv+0xb8>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001158:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <_ZL12MX_TIM1_Initv+0xb8>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <_ZL12MX_TIM1_Initv+0xb8>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001164:	481b      	ldr	r0, [pc, #108]	; (80011d4 <_ZL12MX_TIM1_Initv+0xb8>)
 8001166:	f002 fb1b 	bl	80037a0 <HAL_TIM_Base_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	bf14      	ite	ne
 8001170:	2301      	movne	r3, #1
 8001172:	2300      	moveq	r3, #0
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 800117a:	f000 f87d 	bl	8001278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800117e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001182:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	4619      	mov	r1, r3
 800118a:	4812      	ldr	r0, [pc, #72]	; (80011d4 <_ZL12MX_TIM1_Initv+0xb8>)
 800118c:	f002 fb57 	bl	800383e <HAL_TIM_ConfigClockSource>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	bf14      	ite	ne
 8001196:	2301      	movne	r3, #1
 8001198:	2300      	moveq	r3, #0
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 80011a0:	f000 f86a 	bl	8001278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a4:	2300      	movs	r3, #0
 80011a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ac:	463b      	mov	r3, r7
 80011ae:	4619      	mov	r1, r3
 80011b0:	4808      	ldr	r0, [pc, #32]	; (80011d4 <_ZL12MX_TIM1_Initv+0xb8>)
 80011b2:	f002 fcf3 	bl	8003b9c <HAL_TIMEx_MasterConfigSynchronization>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	bf14      	ite	ne
 80011bc:	2301      	movne	r3, #1
 80011be:	2300      	moveq	r3, #0
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 80011c6:	f000 f857 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200000ac 	.word	0x200000ac
 80011d8:	40012c00 	.word	0x40012c00

080011dc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <_ZL12MX_GPIO_Initv+0x90>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a1d      	ldr	r2, [pc, #116]	; (800126c <_ZL12MX_GPIO_Initv+0x90>)
 80011f6:	f043 0304 	orr.w	r3, r3, #4
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <_ZL12MX_GPIO_Initv+0x90>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <_ZL12MX_GPIO_Initv+0x90>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a17      	ldr	r2, [pc, #92]	; (800126c <_ZL12MX_GPIO_Initv+0x90>)
 800120e:	f043 0308 	orr.w	r3, r3, #8
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <_ZL12MX_GPIO_Initv+0x90>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001226:	4812      	ldr	r0, [pc, #72]	; (8001270 <_ZL12MX_GPIO_Initv+0x94>)
 8001228:	f001 f8bd 	bl	80023a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800122c:	23e0      	movs	r3, #224	; 0xe0
 800122e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	4619      	mov	r1, r3
 800123e:	480d      	ldr	r0, [pc, #52]	; (8001274 <_ZL12MX_GPIO_Initv+0x98>)
 8001240:	f000 ff40 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001248:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124a:	2301      	movs	r3, #1
 800124c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2302      	movs	r3, #2
 8001254:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	4619      	mov	r1, r3
 800125c:	4804      	ldr	r0, [pc, #16]	; (8001270 <_ZL12MX_GPIO_Initv+0x94>)
 800125e:	f000 ff31 	bl	80020c4 <HAL_GPIO_Init>

}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000
 8001270:	40010c00 	.word	0x40010c00
 8001274:	40010800 	.word	0x40010800

08001278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001278:	b4b0      	push	{r4, r5, r7}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	char Error_msg[] = {"How did we get here?"};
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <Error_Handler+0x24>)
 8001280:	463c      	mov	r4, r7
 8001282:	461d      	mov	r5, r3
 8001284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001288:	e895 0003 	ldmia.w	r5, {r0, r1}
 800128c:	6020      	str	r0, [r4, #0]
 800128e:	3404      	adds	r4, #4
 8001290:	7021      	strb	r1, [r4, #0]

  /* USER CODE END Error_Handler_Debug */
}
 8001292:	bf00      	nop
 8001294:	371c      	adds	r7, #28
 8001296:	46bd      	mov	sp, r7
 8001298:	bcb0      	pop	{r4, r5, r7}
 800129a:	4770      	bx	lr
 800129c:	08003d28 	.word	0x08003d28

080012a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_MspInit+0x5c>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	4a14      	ldr	r2, [pc, #80]	; (80012fc <HAL_MspInit+0x5c>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6193      	str	r3, [r2, #24]
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_MspInit+0x5c>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_MspInit+0x5c>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <HAL_MspInit+0x5c>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	61d3      	str	r3, [r2, #28]
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <HAL_MspInit+0x5c>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_MspInit+0x60>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <HAL_MspInit+0x60>)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010000 	.word	0x40010000

08001304 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a14      	ldr	r2, [pc, #80]	; (8001370 <HAL_ADC_MspInit+0x6c>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d121      	bne.n	8001368 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <HAL_ADC_MspInit+0x70>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a12      	ldr	r2, [pc, #72]	; (8001374 <HAL_ADC_MspInit+0x70>)
 800132a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b10      	ldr	r3, [pc, #64]	; (8001374 <HAL_ADC_MspInit+0x70>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <HAL_ADC_MspInit+0x70>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4a0c      	ldr	r2, [pc, #48]	; (8001374 <HAL_ADC_MspInit+0x70>)
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	6193      	str	r3, [r2, #24]
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_ADC_MspInit+0x70>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001354:	2301      	movs	r3, #1
 8001356:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001358:	2303      	movs	r3, #3
 800135a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	4619      	mov	r1, r3
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <HAL_ADC_MspInit+0x74>)
 8001364:	f000 feae 	bl	80020c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001368:	bf00      	nop
 800136a:	3720      	adds	r7, #32
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40012400 	.word	0x40012400
 8001374:	40021000 	.word	0x40021000
 8001378:	40010800 	.word	0x40010800

0800137c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a15      	ldr	r2, [pc, #84]	; (80013ec <HAL_I2C_MspInit+0x70>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d123      	bne.n	80013e4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <HAL_I2C_MspInit+0x74>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a13      	ldr	r2, [pc, #76]	; (80013f0 <HAL_I2C_MspInit+0x74>)
 80013a2:	f043 0308 	orr.w	r3, r3, #8
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <HAL_I2C_MspInit+0x74>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013b4:	23c0      	movs	r3, #192	; 0xc0
 80013b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b8:	2312      	movs	r3, #18
 80013ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	4619      	mov	r1, r3
 80013c6:	480b      	ldr	r0, [pc, #44]	; (80013f4 <HAL_I2C_MspInit+0x78>)
 80013c8:	f000 fe7c 	bl	80020c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_I2C_MspInit+0x74>)
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <HAL_I2C_MspInit+0x74>)
 80013d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013d6:	61d3      	str	r3, [r2, #28]
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <HAL_I2C_MspInit+0x74>)
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013e4:	bf00      	nop
 80013e6:	3720      	adds	r7, #32
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40005400 	.word	0x40005400
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010c00 	.word	0x40010c00

080013f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a09      	ldr	r2, [pc, #36]	; (800142c <HAL_TIM_Base_MspInit+0x34>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d10b      	bne.n	8001422 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <HAL_TIM_Base_MspInit+0x38>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	4a08      	ldr	r2, [pc, #32]	; (8001430 <HAL_TIM_Base_MspInit+0x38>)
 8001410:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001414:	6193      	str	r3, [r2, #24]
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_TIM_Base_MspInit+0x38>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	40012c00 	.word	0x40012c00
 8001430:	40021000 	.word	0x40021000

08001434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <HardFault_Handler+0x4>

08001446 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <MemManage_Handler+0x4>

0800144c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <BusFault_Handler+0x4>

08001452 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <UsageFault_Handler+0x4>

08001458 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001480:	f000 f874 	bl	800156c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}

08001488 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001494:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001496:	e003      	b.n	80014a0 <LoopCopyDataInit>

08001498 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800149a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800149c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800149e:	3104      	adds	r1, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80014a0:	480a      	ldr	r0, [pc, #40]	; (80014cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80014a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80014a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80014a8:	d3f6      	bcc.n	8001498 <CopyDataInit>
  ldr r2, =_sbss
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80014ac:	e002      	b.n	80014b4 <LoopFillZerobss>

080014ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80014b0:	f842 3b04 	str.w	r3, [r2], #4

080014b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80014b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014b8:	d3f9      	bcc.n	80014ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014ba:	f7ff ffe5 	bl	8001488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014be:	f002 fbef 	bl	8003ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014c2:	f7ff fcb7 	bl	8000e34 <main>
  bx lr
 80014c6:	4770      	bx	lr
  ldr r3, =_sidata
 80014c8:	08003d88 	.word	0x08003d88
  ldr r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80014d4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80014d8:	200000f8 	.word	0x200000f8

080014dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014dc:	e7fe      	b.n	80014dc <ADC1_2_IRQHandler>
	...

080014e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_Init+0x28>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a07      	ldr	r2, [pc, #28]	; (8001508 <HAL_Init+0x28>)
 80014ea:	f043 0310 	orr.w	r3, r3, #16
 80014ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f0:	2003      	movs	r0, #3
 80014f2:	f000 fdb3 	bl	800205c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f000 f808 	bl	800150c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014fc:	f7ff fed0 	bl	80012a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40022000 	.word	0x40022000

0800150c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_InitTick+0x54>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_InitTick+0x58>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001522:	fbb3 f3f1 	udiv	r3, r3, r1
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f000 fdbd 	bl	80020aa <HAL_SYSTICK_Config>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e00e      	b.n	8001558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b0f      	cmp	r3, #15
 800153e:	d80a      	bhi.n	8001556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001540:	2200      	movs	r2, #0
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f000 fd93 	bl	8002072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <HAL_InitTick+0x5c>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	e000      	b.n	8001558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000000 	.word	0x20000000
 8001564:	20000008 	.word	0x20000008
 8001568:	20000004 	.word	0x20000004

0800156c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_IncTick+0x1c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_IncTick+0x20>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a03      	ldr	r2, [pc, #12]	; (800158c <HAL_IncTick+0x20>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	20000008 	.word	0x20000008
 800158c:	200000f4 	.word	0x200000f4

08001590 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return uwTick;
 8001594:	4b02      	ldr	r3, [pc, #8]	; (80015a0 <HAL_GetTick+0x10>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	200000f4 	.word	0x200000f4

080015a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e0be      	b.n	8001744 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d109      	bne.n	80015e8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fe8e 	bl	8001304 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 fbb1 	bl	8001d50 <ADC_ConversionStop_Disable>
 80015ee:	4603      	mov	r3, r0
 80015f0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f040 8099 	bne.w	8001732 <HAL_ADC_Init+0x18e>
 8001600:	7dfb      	ldrb	r3, [r7, #23]
 8001602:	2b00      	cmp	r3, #0
 8001604:	f040 8095 	bne.w	8001732 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001610:	f023 0302 	bic.w	r3, r3, #2
 8001614:	f043 0202 	orr.w	r2, r3, #2
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001624:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	7b1b      	ldrb	r3, [r3, #12]
 800162a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800162c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	4313      	orrs	r3, r2
 8001632:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800163c:	d003      	beq.n	8001646 <HAL_ADC_Init+0xa2>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d102      	bne.n	800164c <HAL_ADC_Init+0xa8>
 8001646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164a:	e000      	b.n	800164e <HAL_ADC_Init+0xaa>
 800164c:	2300      	movs	r3, #0
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7d1b      	ldrb	r3, [r3, #20]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d119      	bne.n	8001690 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7b1b      	ldrb	r3, [r3, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d109      	bne.n	8001678 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	3b01      	subs	r3, #1
 800166a:	035a      	lsls	r2, r3, #13
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	e00b      	b.n	8001690 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	f043 0220 	orr.w	r2, r3, #32
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	f043 0201 	orr.w	r2, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	4b28      	ldr	r3, [pc, #160]	; (800174c <HAL_ADC_Init+0x1a8>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	68b9      	ldr	r1, [r7, #8]
 80016b4:	430b      	orrs	r3, r1
 80016b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016c0:	d003      	beq.n	80016ca <HAL_ADC_Init+0x126>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d104      	bne.n	80016d4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	051b      	lsls	r3, r3, #20
 80016d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_ADC_Init+0x1ac>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d10b      	bne.n	8001710 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001702:	f023 0303 	bic.w	r3, r3, #3
 8001706:	f043 0201 	orr.w	r2, r3, #1
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800170e:	e018      	b.n	8001742 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	f023 0312 	bic.w	r3, r3, #18
 8001718:	f043 0210 	orr.w	r2, r3, #16
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	f043 0201 	orr.w	r2, r3, #1
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001730:	e007      	b.n	8001742 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001736:	f043 0210 	orr.w	r2, r3, #16
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001742:	7dfb      	ldrb	r3, [r7, #23]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	ffe1f7fd 	.word	0xffe1f7fd
 8001750:	ff1f0efe 	.word	0xff1f0efe

08001754 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_ADC_Start+0x1a>
 800176a:	2302      	movs	r3, #2
 800176c:	e098      	b.n	80018a0 <HAL_ADC_Start+0x14c>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 fa98 	bl	8001cac <ADC_Enable>
 800177c:	4603      	mov	r3, r0
 800177e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	2b00      	cmp	r3, #0
 8001784:	f040 8087 	bne.w	8001896 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a41      	ldr	r2, [pc, #260]	; (80018a8 <HAL_ADC_Start+0x154>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d105      	bne.n	80017b2 <HAL_ADC_Start+0x5e>
 80017a6:	4b41      	ldr	r3, [pc, #260]	; (80018ac <HAL_ADC_Start+0x158>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d115      	bne.n	80017de <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d026      	beq.n	800181a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017dc:	e01d      	b.n	800181a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a2f      	ldr	r2, [pc, #188]	; (80018ac <HAL_ADC_Start+0x158>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d004      	beq.n	80017fe <HAL_ADC_Start+0xaa>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a2b      	ldr	r2, [pc, #172]	; (80018a8 <HAL_ADC_Start+0x154>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d10d      	bne.n	800181a <HAL_ADC_Start+0xc6>
 80017fe:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <HAL_ADC_Start+0x158>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001806:	2b00      	cmp	r3, #0
 8001808:	d007      	beq.n	800181a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001812:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d006      	beq.n	8001834 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182a:	f023 0206 	bic.w	r2, r3, #6
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	62da      	str	r2, [r3, #44]	; 0x2c
 8001832:	e002      	b.n	800183a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f06f 0202 	mvn.w	r2, #2
 800184a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001856:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800185a:	d113      	bne.n	8001884 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001860:	4a11      	ldr	r2, [pc, #68]	; (80018a8 <HAL_ADC_Start+0x154>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d105      	bne.n	8001872 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_ADC_Start+0x158>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800186e:	2b00      	cmp	r3, #0
 8001870:	d108      	bne.n	8001884 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	e00c      	b.n	800189e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	e003      	b.n	800189e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800189e:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40012800 	.word	0x40012800
 80018ac:	40012400 	.word	0x40012400

080018b0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80018c6:	f7ff fe63 	bl	8001590 <HAL_GetTick>
 80018ca:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00b      	beq.n	80018f2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018de:	f043 0220 	orr.w	r2, r3, #32
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e0c8      	b.n	8001a84 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d12a      	bne.n	8001956 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001906:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800190a:	2b00      	cmp	r3, #0
 800190c:	d123      	bne.n	8001956 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800190e:	e01a      	b.n	8001946 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001916:	d016      	beq.n	8001946 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d007      	beq.n	800192e <HAL_ADC_PollForConversion+0x7e>
 800191e:	f7ff fe37 	bl	8001590 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d20b      	bcs.n	8001946 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001932:	f043 0204 	orr.w	r2, r3, #4
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e09e      	b.n	8001a84 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0dd      	beq.n	8001910 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001954:	e06c      	b.n	8001a30 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001956:	4b4d      	ldr	r3, [pc, #308]	; (8001a8c <HAL_ADC_PollForConversion+0x1dc>)
 8001958:	681c      	ldr	r4, [r3, #0]
 800195a:	2002      	movs	r0, #2
 800195c:	f001 fe64 	bl	8003628 <HAL_RCCEx_GetPeriphCLKFreq>
 8001960:	4603      	mov	r3, r0
 8001962:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6919      	ldr	r1, [r3, #16]
 800196c:	4b48      	ldr	r3, [pc, #288]	; (8001a90 <HAL_ADC_PollForConversion+0x1e0>)
 800196e:	400b      	ands	r3, r1
 8001970:	2b00      	cmp	r3, #0
 8001972:	d118      	bne.n	80019a6 <HAL_ADC_PollForConversion+0xf6>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68d9      	ldr	r1, [r3, #12]
 800197a:	4b46      	ldr	r3, [pc, #280]	; (8001a94 <HAL_ADC_PollForConversion+0x1e4>)
 800197c:	400b      	ands	r3, r1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d111      	bne.n	80019a6 <HAL_ADC_PollForConversion+0xf6>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6919      	ldr	r1, [r3, #16]
 8001988:	4b43      	ldr	r3, [pc, #268]	; (8001a98 <HAL_ADC_PollForConversion+0x1e8>)
 800198a:	400b      	ands	r3, r1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d108      	bne.n	80019a2 <HAL_ADC_PollForConversion+0xf2>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68d9      	ldr	r1, [r3, #12]
 8001996:	4b41      	ldr	r3, [pc, #260]	; (8001a9c <HAL_ADC_PollForConversion+0x1ec>)
 8001998:	400b      	ands	r3, r1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_ADC_PollForConversion+0xf2>
 800199e:	2314      	movs	r3, #20
 80019a0:	e020      	b.n	80019e4 <HAL_ADC_PollForConversion+0x134>
 80019a2:	2329      	movs	r3, #41	; 0x29
 80019a4:	e01e      	b.n	80019e4 <HAL_ADC_PollForConversion+0x134>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6919      	ldr	r1, [r3, #16]
 80019ac:	4b3a      	ldr	r3, [pc, #232]	; (8001a98 <HAL_ADC_PollForConversion+0x1e8>)
 80019ae:	400b      	ands	r3, r1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d106      	bne.n	80019c2 <HAL_ADC_PollForConversion+0x112>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68d9      	ldr	r1, [r3, #12]
 80019ba:	4b38      	ldr	r3, [pc, #224]	; (8001a9c <HAL_ADC_PollForConversion+0x1ec>)
 80019bc:	400b      	ands	r3, r1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00d      	beq.n	80019de <HAL_ADC_PollForConversion+0x12e>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6919      	ldr	r1, [r3, #16]
 80019c8:	4b35      	ldr	r3, [pc, #212]	; (8001aa0 <HAL_ADC_PollForConversion+0x1f0>)
 80019ca:	400b      	ands	r3, r1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d108      	bne.n	80019e2 <HAL_ADC_PollForConversion+0x132>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68d9      	ldr	r1, [r3, #12]
 80019d6:	4b32      	ldr	r3, [pc, #200]	; (8001aa0 <HAL_ADC_PollForConversion+0x1f0>)
 80019d8:	400b      	ands	r3, r1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_ADC_PollForConversion+0x132>
 80019de:	2354      	movs	r3, #84	; 0x54
 80019e0:	e000      	b.n	80019e4 <HAL_ADC_PollForConversion+0x134>
 80019e2:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80019e4:	fb02 f303 	mul.w	r3, r2, r3
 80019e8:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80019ea:	e01d      	b.n	8001a28 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f2:	d016      	beq.n	8001a22 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d007      	beq.n	8001a0a <HAL_ADC_PollForConversion+0x15a>
 80019fa:	f7ff fdc9 	bl	8001590 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d20b      	bcs.n	8001a22 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0e:	f043 0204 	orr.w	r2, r3, #4
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e030      	b.n	8001a84 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3301      	adds	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d8dd      	bhi.n	80019ec <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f06f 0212 	mvn.w	r2, #18
 8001a38:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a50:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a54:	d115      	bne.n	8001a82 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d111      	bne.n	8001a82 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d105      	bne.n	8001a82 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	f043 0201 	orr.w	r2, r3, #1
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	371c      	adds	r7, #28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd90      	pop	{r4, r7, pc}
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	24924924 	.word	0x24924924
 8001a94:	00924924 	.word	0x00924924
 8001a98:	12492492 	.word	0x12492492
 8001a9c:	00492492 	.word	0x00492492
 8001aa0:	00249249 	.word	0x00249249

08001aa4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x20>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e0dc      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x1da>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b06      	cmp	r3, #6
 8001aea:	d81c      	bhi.n	8001b26 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	3b05      	subs	r3, #5
 8001afe:	221f      	movs	r2, #31
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	4019      	ands	r1, r3
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	3b05      	subs	r3, #5
 8001b18:	fa00 f203 	lsl.w	r2, r0, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	635a      	str	r2, [r3, #52]	; 0x34
 8001b24:	e03c      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b0c      	cmp	r3, #12
 8001b2c:	d81c      	bhi.n	8001b68 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b23      	subs	r3, #35	; 0x23
 8001b40:	221f      	movs	r2, #31
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	4019      	ands	r1, r3
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	6818      	ldr	r0, [r3, #0]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	3b23      	subs	r3, #35	; 0x23
 8001b5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	631a      	str	r2, [r3, #48]	; 0x30
 8001b66:	e01b      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	3b41      	subs	r3, #65	; 0x41
 8001b7a:	221f      	movs	r2, #31
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	4019      	ands	r1, r3
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	6818      	ldr	r0, [r3, #0]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	3b41      	subs	r3, #65	; 0x41
 8001b94:	fa00 f203 	lsl.w	r2, r0, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b09      	cmp	r3, #9
 8001ba6:	d91c      	bls.n	8001be2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68d9      	ldr	r1, [r3, #12]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3b1e      	subs	r3, #30
 8001bba:	2207      	movs	r2, #7
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	4019      	ands	r1, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	6898      	ldr	r0, [r3, #8]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3b1e      	subs	r3, #30
 8001bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	e019      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6919      	ldr	r1, [r3, #16]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	2207      	movs	r2, #7
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	4019      	ands	r1, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	6898      	ldr	r0, [r3, #8]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b10      	cmp	r3, #16
 8001c1c:	d003      	beq.n	8001c26 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c22:	2b11      	cmp	r3, #17
 8001c24:	d132      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a1d      	ldr	r2, [pc, #116]	; (8001ca0 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d125      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d126      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c4c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b10      	cmp	r3, #16
 8001c54:	d11a      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c56:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a13      	ldr	r2, [pc, #76]	; (8001ca8 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c60:	0c9a      	lsrs	r2, r3, #18
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c6c:	e002      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f9      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x1b2>
 8001c7a:	e007      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c80:	f043 0220 	orr.w	r2, r3, #32
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	40012400 	.word	0x40012400
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	431bde83 	.word	0x431bde83

08001cac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d039      	beq.n	8001d3e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 0201 	orr.w	r2, r2, #1
 8001cd8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cda:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <ADC_Enable+0x9c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a1b      	ldr	r2, [pc, #108]	; (8001d4c <ADC_Enable+0xa0>)
 8001ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce4:	0c9b      	lsrs	r3, r3, #18
 8001ce6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ce8:	e002      	b.n	8001cf0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f9      	bne.n	8001cea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cf6:	f7ff fc4b 	bl	8001590 <HAL_GetTick>
 8001cfa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cfc:	e018      	b.n	8001d30 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cfe:	f7ff fc47 	bl	8001590 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d911      	bls.n	8001d30 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	f043 0210 	orr.w	r2, r3, #16
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	f043 0201 	orr.w	r2, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e007      	b.n	8001d40 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d1df      	bne.n	8001cfe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	431bde83 	.word	0x431bde83

08001d50 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d127      	bne.n	8001dba <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0201 	bic.w	r2, r2, #1
 8001d78:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d7a:	f7ff fc09 	bl	8001590 <HAL_GetTick>
 8001d7e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d80:	e014      	b.n	8001dac <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d82:	f7ff fc05 	bl	8001590 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d90d      	bls.n	8001dac <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	f043 0210 	orr.w	r2, r3, #16
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e007      	b.n	8001dbc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d0e3      	beq.n	8001d82 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADCEx_Calibration_Start+0x1e>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e086      	b.n	8001ef0 <HAL_ADCEx_Calibration_Start+0x12c>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ffb0 	bl	8001d50 <ADC_ConversionStop_Disable>
 8001df0:	4603      	mov	r3, r0
 8001df2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001df4:	7dfb      	ldrb	r3, [r7, #23]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d175      	bne.n	8001ee6 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e02:	f023 0302 	bic.w	r3, r3, #2
 8001e06:	f043 0202 	orr.w	r2, r3, #2
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001e0e:	4b3a      	ldr	r3, [pc, #232]	; (8001ef8 <HAL_ADCEx_Calibration_Start+0x134>)
 8001e10:	681c      	ldr	r4, [r3, #0]
 8001e12:	2002      	movs	r0, #2
 8001e14:	f001 fc08 	bl	8003628 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001e1e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001e20:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001e22:	e002      	b.n	8001e2a <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f9      	bne.n	8001e24 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ff3b 	bl	8001cac <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 0208 	orr.w	r2, r2, #8
 8001e44:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001e46:	f7ff fba3 	bl	8001590 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001e4c:	e014      	b.n	8001e78 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001e4e:	f7ff fb9f 	bl	8001590 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b0a      	cmp	r3, #10
 8001e5a:	d90d      	bls.n	8001e78 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	f023 0312 	bic.w	r3, r3, #18
 8001e64:	f043 0210 	orr.w	r2, r3, #16
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e03b      	b.n	8001ef0 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1e3      	bne.n	8001e4e <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0204 	orr.w	r2, r2, #4
 8001e94:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001e96:	f7ff fb7b 	bl	8001590 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001e9c:	e014      	b.n	8001ec8 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001e9e:	f7ff fb77 	bl	8001590 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b0a      	cmp	r3, #10
 8001eaa:	d90d      	bls.n	8001ec8 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	f023 0312 	bic.w	r3, r3, #18
 8001eb4:	f043 0210 	orr.w	r2, r3, #16
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e013      	b.n	8001ef0 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1e3      	bne.n	8001e9e <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	f023 0303 	bic.w	r3, r3, #3
 8001ede:	f043 0201 	orr.w	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	371c      	adds	r7, #28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd90      	pop	{r4, r7, pc}
 8001ef8:	20000000 	.word	0x20000000

08001efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2e:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	60d3      	str	r3, [r2, #12]
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <__NVIC_GetPriorityGrouping+0x18>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	f003 0307 	and.w	r3, r3, #7
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db0a      	blt.n	8001f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	490c      	ldr	r1, [pc, #48]	; (8001fac <__NVIC_SetPriority+0x4c>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	0112      	lsls	r2, r2, #4
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	440b      	add	r3, r1
 8001f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f88:	e00a      	b.n	8001fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4908      	ldr	r1, [pc, #32]	; (8001fb0 <__NVIC_SetPriority+0x50>)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3b04      	subs	r3, #4
 8001f98:	0112      	lsls	r2, r2, #4
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	761a      	strb	r2, [r3, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	; 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f1c3 0307 	rsb	r3, r3, #7
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	bf28      	it	cs
 8001fd2:	2304      	movcs	r3, #4
 8001fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d902      	bls.n	8001fe4 <NVIC_EncodePriority+0x30>
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3b03      	subs	r3, #3
 8001fe2:	e000      	b.n	8001fe6 <NVIC_EncodePriority+0x32>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	43d9      	mvns	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	4313      	orrs	r3, r2
         );
}
 800200e:	4618      	mov	r0, r3
 8002010:	3724      	adds	r7, #36	; 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002028:	d301      	bcc.n	800202e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202a:	2301      	movs	r3, #1
 800202c:	e00f      	b.n	800204e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <SysTick_Config+0x40>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002036:	210f      	movs	r1, #15
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	f7ff ff90 	bl	8001f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <SysTick_Config+0x40>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <SysTick_Config+0x40>)
 8002048:	2207      	movs	r2, #7
 800204a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	e000e010 	.word	0xe000e010

0800205c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff49 	bl	8001efc <__NVIC_SetPriorityGrouping>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002084:	f7ff ff5e 	bl	8001f44 <__NVIC_GetPriorityGrouping>
 8002088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	f7ff ff90 	bl	8001fb4 <NVIC_EncodePriority>
 8002094:	4602      	mov	r2, r0
 8002096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff5f 	bl	8001f60 <__NVIC_SetPriority>
}
 80020a2:	bf00      	nop
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ffb0 	bl	8002018 <SysTick_Config>
 80020b8:	4603      	mov	r3, r0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b08b      	sub	sp, #44	; 0x2c
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ce:	2300      	movs	r3, #0
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020d2:	2300      	movs	r3, #0
 80020d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d6:	e127      	b.n	8002328 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020d8:	2201      	movs	r2, #1
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	f040 8116 	bne.w	8002322 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b12      	cmp	r3, #18
 80020fc:	d034      	beq.n	8002168 <HAL_GPIO_Init+0xa4>
 80020fe:	2b12      	cmp	r3, #18
 8002100:	d80d      	bhi.n	800211e <HAL_GPIO_Init+0x5a>
 8002102:	2b02      	cmp	r3, #2
 8002104:	d02b      	beq.n	800215e <HAL_GPIO_Init+0x9a>
 8002106:	2b02      	cmp	r3, #2
 8002108:	d804      	bhi.n	8002114 <HAL_GPIO_Init+0x50>
 800210a:	2b00      	cmp	r3, #0
 800210c:	d031      	beq.n	8002172 <HAL_GPIO_Init+0xae>
 800210e:	2b01      	cmp	r3, #1
 8002110:	d01c      	beq.n	800214c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002112:	e048      	b.n	80021a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002114:	2b03      	cmp	r3, #3
 8002116:	d043      	beq.n	80021a0 <HAL_GPIO_Init+0xdc>
 8002118:	2b11      	cmp	r3, #17
 800211a:	d01b      	beq.n	8002154 <HAL_GPIO_Init+0x90>
          break;
 800211c:	e043      	b.n	80021a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800211e:	4a89      	ldr	r2, [pc, #548]	; (8002344 <HAL_GPIO_Init+0x280>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d026      	beq.n	8002172 <HAL_GPIO_Init+0xae>
 8002124:	4a87      	ldr	r2, [pc, #540]	; (8002344 <HAL_GPIO_Init+0x280>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d806      	bhi.n	8002138 <HAL_GPIO_Init+0x74>
 800212a:	4a87      	ldr	r2, [pc, #540]	; (8002348 <HAL_GPIO_Init+0x284>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d020      	beq.n	8002172 <HAL_GPIO_Init+0xae>
 8002130:	4a86      	ldr	r2, [pc, #536]	; (800234c <HAL_GPIO_Init+0x288>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d01d      	beq.n	8002172 <HAL_GPIO_Init+0xae>
          break;
 8002136:	e036      	b.n	80021a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002138:	4a85      	ldr	r2, [pc, #532]	; (8002350 <HAL_GPIO_Init+0x28c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d019      	beq.n	8002172 <HAL_GPIO_Init+0xae>
 800213e:	4a85      	ldr	r2, [pc, #532]	; (8002354 <HAL_GPIO_Init+0x290>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d016      	beq.n	8002172 <HAL_GPIO_Init+0xae>
 8002144:	4a84      	ldr	r2, [pc, #528]	; (8002358 <HAL_GPIO_Init+0x294>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d013      	beq.n	8002172 <HAL_GPIO_Init+0xae>
          break;
 800214a:	e02c      	b.n	80021a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	623b      	str	r3, [r7, #32]
          break;
 8002152:	e028      	b.n	80021a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	3304      	adds	r3, #4
 800215a:	623b      	str	r3, [r7, #32]
          break;
 800215c:	e023      	b.n	80021a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	3308      	adds	r3, #8
 8002164:	623b      	str	r3, [r7, #32]
          break;
 8002166:	e01e      	b.n	80021a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	330c      	adds	r3, #12
 800216e:	623b      	str	r3, [r7, #32]
          break;
 8002170:	e019      	b.n	80021a6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d102      	bne.n	8002180 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800217a:	2304      	movs	r3, #4
 800217c:	623b      	str	r3, [r7, #32]
          break;
 800217e:	e012      	b.n	80021a6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d105      	bne.n	8002194 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002188:	2308      	movs	r3, #8
 800218a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	611a      	str	r2, [r3, #16]
          break;
 8002192:	e008      	b.n	80021a6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002194:	2308      	movs	r3, #8
 8002196:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69fa      	ldr	r2, [r7, #28]
 800219c:	615a      	str	r2, [r3, #20]
          break;
 800219e:	e002      	b.n	80021a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021a0:	2300      	movs	r3, #0
 80021a2:	623b      	str	r3, [r7, #32]
          break;
 80021a4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2bff      	cmp	r3, #255	; 0xff
 80021aa:	d801      	bhi.n	80021b0 <HAL_GPIO_Init+0xec>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	e001      	b.n	80021b4 <HAL_GPIO_Init+0xf0>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3304      	adds	r3, #4
 80021b4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	2bff      	cmp	r3, #255	; 0xff
 80021ba:	d802      	bhi.n	80021c2 <HAL_GPIO_Init+0xfe>
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_Init+0x104>
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	3b08      	subs	r3, #8
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	210f      	movs	r1, #15
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	401a      	ands	r2, r3
 80021da:	6a39      	ldr	r1, [r7, #32]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	431a      	orrs	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 8096 	beq.w	8002322 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021f6:	4b59      	ldr	r3, [pc, #356]	; (800235c <HAL_GPIO_Init+0x298>)
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	4a58      	ldr	r2, [pc, #352]	; (800235c <HAL_GPIO_Init+0x298>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	6193      	str	r3, [r2, #24]
 8002202:	4b56      	ldr	r3, [pc, #344]	; (800235c <HAL_GPIO_Init+0x298>)
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800220e:	4a54      	ldr	r2, [pc, #336]	; (8002360 <HAL_GPIO_Init+0x29c>)
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	3302      	adds	r3, #2
 8002216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	220f      	movs	r2, #15
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	4013      	ands	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4b      	ldr	r2, [pc, #300]	; (8002364 <HAL_GPIO_Init+0x2a0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d013      	beq.n	8002262 <HAL_GPIO_Init+0x19e>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4a      	ldr	r2, [pc, #296]	; (8002368 <HAL_GPIO_Init+0x2a4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d00d      	beq.n	800225e <HAL_GPIO_Init+0x19a>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a49      	ldr	r2, [pc, #292]	; (800236c <HAL_GPIO_Init+0x2a8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d007      	beq.n	800225a <HAL_GPIO_Init+0x196>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a48      	ldr	r2, [pc, #288]	; (8002370 <HAL_GPIO_Init+0x2ac>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d101      	bne.n	8002256 <HAL_GPIO_Init+0x192>
 8002252:	2303      	movs	r3, #3
 8002254:	e006      	b.n	8002264 <HAL_GPIO_Init+0x1a0>
 8002256:	2304      	movs	r3, #4
 8002258:	e004      	b.n	8002264 <HAL_GPIO_Init+0x1a0>
 800225a:	2302      	movs	r3, #2
 800225c:	e002      	b.n	8002264 <HAL_GPIO_Init+0x1a0>
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <HAL_GPIO_Init+0x1a0>
 8002262:	2300      	movs	r3, #0
 8002264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002266:	f002 0203 	and.w	r2, r2, #3
 800226a:	0092      	lsls	r2, r2, #2
 800226c:	4093      	lsls	r3, r2
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4313      	orrs	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002274:	493a      	ldr	r1, [pc, #232]	; (8002360 <HAL_GPIO_Init+0x29c>)
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	089b      	lsrs	r3, r3, #2
 800227a:	3302      	adds	r3, #2
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d006      	beq.n	800229c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800228e:	4b39      	ldr	r3, [pc, #228]	; (8002374 <HAL_GPIO_Init+0x2b0>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4938      	ldr	r1, [pc, #224]	; (8002374 <HAL_GPIO_Init+0x2b0>)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]
 800229a:	e006      	b.n	80022aa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800229c:	4b35      	ldr	r3, [pc, #212]	; (8002374 <HAL_GPIO_Init+0x2b0>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	4933      	ldr	r1, [pc, #204]	; (8002374 <HAL_GPIO_Init+0x2b0>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d006      	beq.n	80022c4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022b6:	4b2f      	ldr	r3, [pc, #188]	; (8002374 <HAL_GPIO_Init+0x2b0>)
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	492e      	ldr	r1, [pc, #184]	; (8002374 <HAL_GPIO_Init+0x2b0>)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	604b      	str	r3, [r1, #4]
 80022c2:	e006      	b.n	80022d2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022c4:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <HAL_GPIO_Init+0x2b0>)
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	4929      	ldr	r1, [pc, #164]	; (8002374 <HAL_GPIO_Init+0x2b0>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d006      	beq.n	80022ec <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022de:	4b25      	ldr	r3, [pc, #148]	; (8002374 <HAL_GPIO_Init+0x2b0>)
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	4924      	ldr	r1, [pc, #144]	; (8002374 <HAL_GPIO_Init+0x2b0>)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	608b      	str	r3, [r1, #8]
 80022ea:	e006      	b.n	80022fa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022ec:	4b21      	ldr	r3, [pc, #132]	; (8002374 <HAL_GPIO_Init+0x2b0>)
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	491f      	ldr	r1, [pc, #124]	; (8002374 <HAL_GPIO_Init+0x2b0>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d006      	beq.n	8002314 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002306:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_GPIO_Init+0x2b0>)
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	491a      	ldr	r1, [pc, #104]	; (8002374 <HAL_GPIO_Init+0x2b0>)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	60cb      	str	r3, [r1, #12]
 8002312:	e006      	b.n	8002322 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002314:	4b17      	ldr	r3, [pc, #92]	; (8002374 <HAL_GPIO_Init+0x2b0>)
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	43db      	mvns	r3, r3
 800231c:	4915      	ldr	r1, [pc, #84]	; (8002374 <HAL_GPIO_Init+0x2b0>)
 800231e:	4013      	ands	r3, r2
 8002320:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	3301      	adds	r3, #1
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	fa22 f303 	lsr.w	r3, r2, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	f47f aed0 	bne.w	80020d8 <HAL_GPIO_Init+0x14>
  }
}
 8002338:	bf00      	nop
 800233a:	372c      	adds	r7, #44	; 0x2c
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	10210000 	.word	0x10210000
 8002348:	10110000 	.word	0x10110000
 800234c:	10120000 	.word	0x10120000
 8002350:	10310000 	.word	0x10310000
 8002354:	10320000 	.word	0x10320000
 8002358:	10220000 	.word	0x10220000
 800235c:	40021000 	.word	0x40021000
 8002360:	40010000 	.word	0x40010000
 8002364:	40010800 	.word	0x40010800
 8002368:	40010c00 	.word	0x40010c00
 800236c:	40011000 	.word	0x40011000
 8002370:	40011400 	.word	0x40011400
 8002374:	40010400 	.word	0x40010400

08002378 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	887b      	ldrh	r3, [r7, #2]
 800238a:	4013      	ands	r3, r2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
 8002394:	e001      	b.n	800239a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800239a:	7bfb      	ldrb	r3, [r7, #15]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr

080023a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	460b      	mov	r3, r1
 80023b0:	807b      	strh	r3, [r7, #2]
 80023b2:	4613      	mov	r3, r2
 80023b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023b6:	787b      	ldrb	r3, [r7, #1]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023bc:	887a      	ldrh	r2, [r7, #2]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023c2:	e003      	b.n	80023cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023c4:	887b      	ldrh	r3, [r7, #2]
 80023c6:	041a      	lsls	r2, r3, #16
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	611a      	str	r2, [r3, #16]
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b085      	sub	sp, #20
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	460b      	mov	r3, r1
 80023e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023e8:	887a      	ldrh	r2, [r7, #2]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4013      	ands	r3, r2
 80023ee:	041a      	lsls	r2, r3, #16
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	43d9      	mvns	r1, r3
 80023f4:	887b      	ldrh	r3, [r7, #2]
 80023f6:	400b      	ands	r3, r1
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	611a      	str	r2, [r3, #16]
}
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e11f      	b.n	800265a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d106      	bne.n	8002434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fe ffa4 	bl	800137c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2224      	movs	r2, #36	; 0x24
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0201 	bic.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800245a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800246a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800246c:	f000 ffe0 	bl	8003430 <HAL_RCC_GetPCLK1Freq>
 8002470:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4a7b      	ldr	r2, [pc, #492]	; (8002664 <HAL_I2C_Init+0x25c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d807      	bhi.n	800248c <HAL_I2C_Init+0x84>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4a7a      	ldr	r2, [pc, #488]	; (8002668 <HAL_I2C_Init+0x260>)
 8002480:	4293      	cmp	r3, r2
 8002482:	bf94      	ite	ls
 8002484:	2301      	movls	r3, #1
 8002486:	2300      	movhi	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	e006      	b.n	800249a <HAL_I2C_Init+0x92>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4a77      	ldr	r2, [pc, #476]	; (800266c <HAL_I2C_Init+0x264>)
 8002490:	4293      	cmp	r3, r2
 8002492:	bf94      	ite	ls
 8002494:	2301      	movls	r3, #1
 8002496:	2300      	movhi	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e0db      	b.n	800265a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4a72      	ldr	r2, [pc, #456]	; (8002670 <HAL_I2C_Init+0x268>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	0c9b      	lsrs	r3, r3, #18
 80024ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	430a      	orrs	r2, r1
 80024c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4a64      	ldr	r2, [pc, #400]	; (8002664 <HAL_I2C_Init+0x25c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d802      	bhi.n	80024dc <HAL_I2C_Init+0xd4>
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	3301      	adds	r3, #1
 80024da:	e009      	b.n	80024f0 <HAL_I2C_Init+0xe8>
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024e2:	fb02 f303 	mul.w	r3, r2, r3
 80024e6:	4a63      	ldr	r2, [pc, #396]	; (8002674 <HAL_I2C_Init+0x26c>)
 80024e8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ec:	099b      	lsrs	r3, r3, #6
 80024ee:	3301      	adds	r3, #1
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	430b      	orrs	r3, r1
 80024f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002502:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	4956      	ldr	r1, [pc, #344]	; (8002664 <HAL_I2C_Init+0x25c>)
 800250c:	428b      	cmp	r3, r1
 800250e:	d80d      	bhi.n	800252c <HAL_I2C_Init+0x124>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1e59      	subs	r1, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	fbb1 f3f3 	udiv	r3, r1, r3
 800251e:	3301      	adds	r3, #1
 8002520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002524:	2b04      	cmp	r3, #4
 8002526:	bf38      	it	cc
 8002528:	2304      	movcc	r3, #4
 800252a:	e04f      	b.n	80025cc <HAL_I2C_Init+0x1c4>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d111      	bne.n	8002558 <HAL_I2C_Init+0x150>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1e58      	subs	r0, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6859      	ldr	r1, [r3, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	440b      	add	r3, r1
 8002542:	fbb0 f3f3 	udiv	r3, r0, r3
 8002546:	3301      	adds	r3, #1
 8002548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	e012      	b.n	800257e <HAL_I2C_Init+0x176>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1e58      	subs	r0, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6859      	ldr	r1, [r3, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	0099      	lsls	r1, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	fbb0 f3f3 	udiv	r3, r0, r3
 800256e:	3301      	adds	r3, #1
 8002570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_I2C_Init+0x17e>
 8002582:	2301      	movs	r3, #1
 8002584:	e022      	b.n	80025cc <HAL_I2C_Init+0x1c4>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10e      	bne.n	80025ac <HAL_I2C_Init+0x1a4>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1e58      	subs	r0, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6859      	ldr	r1, [r3, #4]
 8002596:	460b      	mov	r3, r1
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	440b      	add	r3, r1
 800259c:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a0:	3301      	adds	r3, #1
 80025a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025aa:	e00f      	b.n	80025cc <HAL_I2C_Init+0x1c4>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1e58      	subs	r0, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6859      	ldr	r1, [r3, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	0099      	lsls	r1, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	6809      	ldr	r1, [r1, #0]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69da      	ldr	r2, [r3, #28]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6911      	ldr	r1, [r2, #16]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68d2      	ldr	r2, [r2, #12]
 8002606:	4311      	orrs	r1, r2
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	430b      	orrs	r3, r1
 800260e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695a      	ldr	r2, [r3, #20]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2220      	movs	r2, #32
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	000186a0 	.word	0x000186a0
 8002668:	001e847f 	.word	0x001e847f
 800266c:	003d08ff 	.word	0x003d08ff
 8002670:	431bde83 	.word	0x431bde83
 8002674:	10624dd3 	.word	0x10624dd3

08002678 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af02      	add	r7, sp, #8
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	461a      	mov	r2, r3
 8002684:	460b      	mov	r3, r1
 8002686:	817b      	strh	r3, [r7, #10]
 8002688:	4613      	mov	r3, r2
 800268a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800268c:	f7fe ff80 	bl	8001590 <HAL_GetTick>
 8002690:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b20      	cmp	r3, #32
 800269c:	f040 80e0 	bne.w	8002860 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2319      	movs	r3, #25
 80026a6:	2201      	movs	r2, #1
 80026a8:	4970      	ldr	r1, [pc, #448]	; (800286c <HAL_I2C_Master_Transmit+0x1f4>)
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f964 	bl	8002978 <I2C_WaitOnFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026b6:	2302      	movs	r3, #2
 80026b8:	e0d3      	b.n	8002862 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_I2C_Master_Transmit+0x50>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e0cc      	b.n	8002862 <HAL_I2C_Master_Transmit+0x1ea>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d007      	beq.n	80026ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0201 	orr.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2221      	movs	r2, #33	; 0x21
 8002702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2210      	movs	r2, #16
 800270a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	893a      	ldrh	r2, [r7, #8]
 800271e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4a50      	ldr	r2, [pc, #320]	; (8002870 <HAL_I2C_Master_Transmit+0x1f8>)
 800272e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002730:	8979      	ldrh	r1, [r7, #10]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	6a3a      	ldr	r2, [r7, #32]
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f89c 	bl	8002874 <I2C_MasterRequestWrite>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e08d      	b.n	8002862 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800275c:	e066      	b.n	800282c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	6a39      	ldr	r1, [r7, #32]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f9de 	bl	8002b24 <I2C_WaitOnTXEFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00d      	beq.n	800278a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	2b04      	cmp	r3, #4
 8002774:	d107      	bne.n	8002786 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002784:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e06b      	b.n	8002862 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d11b      	bne.n	8002800 <HAL_I2C_Master_Transmit+0x188>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d017      	beq.n	8002800 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	781a      	ldrb	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	6a39      	ldr	r1, [r7, #32]
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 f9ce 	bl	8002ba6 <I2C_WaitOnBTFFlagUntilTimeout>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00d      	beq.n	800282c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	2b04      	cmp	r3, #4
 8002816:	d107      	bne.n	8002828 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002826:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e01a      	b.n	8002862 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002830:	2b00      	cmp	r3, #0
 8002832:	d194      	bne.n	800275e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002842:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	e000      	b.n	8002862 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002860:	2302      	movs	r3, #2
  }
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	00100002 	.word	0x00100002
 8002870:	ffff0000 	.word	0xffff0000

08002874 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af02      	add	r7, sp, #8
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	460b      	mov	r3, r1
 8002882:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2b08      	cmp	r3, #8
 800288e:	d006      	beq.n	800289e <I2C_MasterRequestWrite+0x2a>
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d003      	beq.n	800289e <I2C_MasterRequestWrite+0x2a>
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800289c:	d108      	bne.n	80028b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	e00b      	b.n	80028c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	2b12      	cmp	r3, #18
 80028b6:	d107      	bne.n	80028c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f84f 	bl	8002978 <I2C_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00d      	beq.n	80028fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ee:	d103      	bne.n	80028f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e035      	b.n	8002968 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002904:	d108      	bne.n	8002918 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002906:	897b      	ldrh	r3, [r7, #10]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002914:	611a      	str	r2, [r3, #16]
 8002916:	e01b      	b.n	8002950 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002918:	897b      	ldrh	r3, [r7, #10]
 800291a:	11db      	asrs	r3, r3, #7
 800291c:	b2db      	uxtb	r3, r3
 800291e:	f003 0306 	and.w	r3, r3, #6
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f063 030f 	orn	r3, r3, #15
 8002928:	b2da      	uxtb	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	490e      	ldr	r1, [pc, #56]	; (8002970 <I2C_MasterRequestWrite+0xfc>)
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f875 	bl	8002a26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e010      	b.n	8002968 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002946:	897b      	ldrh	r3, [r7, #10]
 8002948:	b2da      	uxtb	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	4907      	ldr	r1, [pc, #28]	; (8002974 <I2C_MasterRequestWrite+0x100>)
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 f865 	bl	8002a26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	00010008 	.word	0x00010008
 8002974:	00010002 	.word	0x00010002

08002978 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	4613      	mov	r3, r2
 8002986:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002988:	e025      	b.n	80029d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002990:	d021      	beq.n	80029d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002992:	f7fe fdfd 	bl	8001590 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d302      	bcc.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d116      	bne.n	80029d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f043 0220 	orr.w	r2, r3, #32
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e023      	b.n	8002a1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	0c1b      	lsrs	r3, r3, #16
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d10d      	bne.n	80029fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	43da      	mvns	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4013      	ands	r3, r2
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	bf0c      	ite	eq
 80029f2:	2301      	moveq	r3, #1
 80029f4:	2300      	movne	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	e00c      	b.n	8002a16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	43da      	mvns	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4013      	ands	r3, r2
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	bf0c      	ite	eq
 8002a0e:	2301      	moveq	r3, #1
 8002a10:	2300      	movne	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d0b6      	beq.n	800298a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a34:	e051      	b.n	8002ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a44:	d123      	bne.n	8002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a54:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a5e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f043 0204 	orr.w	r2, r3, #4
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e046      	b.n	8002b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d021      	beq.n	8002ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a96:	f7fe fd7b 	bl	8001590 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d302      	bcc.n	8002aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d116      	bne.n	8002ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f043 0220 	orr.w	r2, r3, #32
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e020      	b.n	8002b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	0c1b      	lsrs	r3, r3, #16
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d10c      	bne.n	8002afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	43da      	mvns	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4013      	ands	r3, r2
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	bf14      	ite	ne
 8002af6:	2301      	movne	r3, #1
 8002af8:	2300      	moveq	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	e00b      	b.n	8002b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	43da      	mvns	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf14      	ite	ne
 8002b10:	2301      	movne	r3, #1
 8002b12:	2300      	moveq	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d18d      	bne.n	8002a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b30:	e02d      	b.n	8002b8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 f878 	bl	8002c28 <I2C_IsAcknowledgeFailed>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e02d      	b.n	8002b9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d021      	beq.n	8002b8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4a:	f7fe fd21 	bl	8001590 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d302      	bcc.n	8002b60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d116      	bne.n	8002b8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f043 0220 	orr.w	r2, r3, #32
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e007      	b.n	8002b9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b98:	2b80      	cmp	r3, #128	; 0x80
 8002b9a:	d1ca      	bne.n	8002b32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	60f8      	str	r0, [r7, #12]
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bb2:	e02d      	b.n	8002c10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 f837 	bl	8002c28 <I2C_IsAcknowledgeFailed>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e02d      	b.n	8002c20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bca:	d021      	beq.n	8002c10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bcc:	f7fe fce0 	bl	8001590 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d302      	bcc.n	8002be2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d116      	bne.n	8002c10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	f043 0220 	orr.w	r2, r3, #32
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e007      	b.n	8002c20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d1ca      	bne.n	8002bb4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3e:	d11b      	bne.n	8002c78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	f043 0204 	orr.w	r2, r3, #4
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e26c      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 8087 	beq.w	8002db2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ca4:	4b92      	ldr	r3, [pc, #584]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d00c      	beq.n	8002cca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cb0:	4b8f      	ldr	r3, [pc, #572]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 030c 	and.w	r3, r3, #12
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d112      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x5e>
 8002cbc:	4b8c      	ldr	r3, [pc, #560]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc8:	d10b      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cca:	4b89      	ldr	r3, [pc, #548]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d06c      	beq.n	8002db0 <HAL_RCC_OscConfig+0x12c>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d168      	bne.n	8002db0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e246      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cea:	d106      	bne.n	8002cfa <HAL_RCC_OscConfig+0x76>
 8002cec:	4b80      	ldr	r3, [pc, #512]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a7f      	ldr	r2, [pc, #508]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	e02e      	b.n	8002d58 <HAL_RCC_OscConfig+0xd4>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10c      	bne.n	8002d1c <HAL_RCC_OscConfig+0x98>
 8002d02:	4b7b      	ldr	r3, [pc, #492]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a7a      	ldr	r2, [pc, #488]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	4b78      	ldr	r3, [pc, #480]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a77      	ldr	r2, [pc, #476]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e01d      	b.n	8002d58 <HAL_RCC_OscConfig+0xd4>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0xbc>
 8002d26:	4b72      	ldr	r3, [pc, #456]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a71      	ldr	r2, [pc, #452]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b6f      	ldr	r3, [pc, #444]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a6e      	ldr	r2, [pc, #440]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e00b      	b.n	8002d58 <HAL_RCC_OscConfig+0xd4>
 8002d40:	4b6b      	ldr	r3, [pc, #428]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a6a      	ldr	r2, [pc, #424]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b68      	ldr	r3, [pc, #416]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a67      	ldr	r2, [pc, #412]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d013      	beq.n	8002d88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe fc16 	bl	8001590 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d68:	f7fe fc12 	bl	8001590 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e1fa      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	4b5d      	ldr	r3, [pc, #372]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0xe4>
 8002d86:	e014      	b.n	8002db2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe fc02 	bl	8001590 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d90:	f7fe fbfe 	bl	8001590 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	; 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e1e6      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	4b53      	ldr	r3, [pc, #332]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x10c>
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d063      	beq.n	8002e86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dbe:	4b4c      	ldr	r3, [pc, #304]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00b      	beq.n	8002de2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002dca:	4b49      	ldr	r3, [pc, #292]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d11c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x18c>
 8002dd6:	4b46      	ldr	r3, [pc, #280]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d116      	bne.n	8002e10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de2:	4b43      	ldr	r3, [pc, #268]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_RCC_OscConfig+0x176>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d001      	beq.n	8002dfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e1ba      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfa:	4b3d      	ldr	r3, [pc, #244]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4939      	ldr	r1, [pc, #228]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0e:	e03a      	b.n	8002e86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d020      	beq.n	8002e5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e18:	4b36      	ldr	r3, [pc, #216]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1e:	f7fe fbb7 	bl	8001590 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e26:	f7fe fbb3 	bl	8001590 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e19b      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e38:	4b2d      	ldr	r3, [pc, #180]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e44:	4b2a      	ldr	r3, [pc, #168]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4927      	ldr	r1, [pc, #156]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]
 8002e58:	e015      	b.n	8002e86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5a:	4b26      	ldr	r3, [pc, #152]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fe fb96 	bl	8001590 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e68:	f7fe fb92 	bl	8001590 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e17a      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	4b1d      	ldr	r3, [pc, #116]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d03a      	beq.n	8002f08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d019      	beq.n	8002ece <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9a:	4b17      	ldr	r3, [pc, #92]	; (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea0:	f7fe fb76 	bl	8001590 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea8:	f7fe fb72 	bl	8001590 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e15a      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eba:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ec6:	2001      	movs	r0, #1
 8002ec8:	f000 fada 	bl	8003480 <RCC_Delay>
 8002ecc:	e01c      	b.n	8002f08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed4:	f7fe fb5c 	bl	8001590 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eda:	e00f      	b.n	8002efc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002edc:	f7fe fb58 	bl	8001590 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d908      	bls.n	8002efc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e140      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	42420000 	.word	0x42420000
 8002ef8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efc:	4b9e      	ldr	r3, [pc, #632]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1e9      	bne.n	8002edc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80a6 	beq.w	8003062 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1a:	4b97      	ldr	r3, [pc, #604]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10d      	bne.n	8002f42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f26:	4b94      	ldr	r3, [pc, #592]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4a93      	ldr	r2, [pc, #588]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f30:	61d3      	str	r3, [r2, #28]
 8002f32:	4b91      	ldr	r3, [pc, #580]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f42:	4b8e      	ldr	r3, [pc, #568]	; (800317c <HAL_RCC_OscConfig+0x4f8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d118      	bne.n	8002f80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4e:	4b8b      	ldr	r3, [pc, #556]	; (800317c <HAL_RCC_OscConfig+0x4f8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a8a      	ldr	r2, [pc, #552]	; (800317c <HAL_RCC_OscConfig+0x4f8>)
 8002f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5a:	f7fe fb19 	bl	8001590 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f62:	f7fe fb15 	bl	8001590 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b64      	cmp	r3, #100	; 0x64
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e0fd      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f74:	4b81      	ldr	r3, [pc, #516]	; (800317c <HAL_RCC_OscConfig+0x4f8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d106      	bne.n	8002f96 <HAL_RCC_OscConfig+0x312>
 8002f88:	4b7b      	ldr	r3, [pc, #492]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	4a7a      	ldr	r2, [pc, #488]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6213      	str	r3, [r2, #32]
 8002f94:	e02d      	b.n	8002ff2 <HAL_RCC_OscConfig+0x36e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x334>
 8002f9e:	4b76      	ldr	r3, [pc, #472]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	4a75      	ldr	r2, [pc, #468]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	6213      	str	r3, [r2, #32]
 8002faa:	4b73      	ldr	r3, [pc, #460]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	4a72      	ldr	r2, [pc, #456]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fb0:	f023 0304 	bic.w	r3, r3, #4
 8002fb4:	6213      	str	r3, [r2, #32]
 8002fb6:	e01c      	b.n	8002ff2 <HAL_RCC_OscConfig+0x36e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b05      	cmp	r3, #5
 8002fbe:	d10c      	bne.n	8002fda <HAL_RCC_OscConfig+0x356>
 8002fc0:	4b6d      	ldr	r3, [pc, #436]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	4a6c      	ldr	r2, [pc, #432]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fc6:	f043 0304 	orr.w	r3, r3, #4
 8002fca:	6213      	str	r3, [r2, #32]
 8002fcc:	4b6a      	ldr	r3, [pc, #424]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	4a69      	ldr	r2, [pc, #420]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6213      	str	r3, [r2, #32]
 8002fd8:	e00b      	b.n	8002ff2 <HAL_RCC_OscConfig+0x36e>
 8002fda:	4b67      	ldr	r3, [pc, #412]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	4a66      	ldr	r2, [pc, #408]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fe0:	f023 0301 	bic.w	r3, r3, #1
 8002fe4:	6213      	str	r3, [r2, #32]
 8002fe6:	4b64      	ldr	r3, [pc, #400]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	4a63      	ldr	r2, [pc, #396]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fec:	f023 0304 	bic.w	r3, r3, #4
 8002ff0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d015      	beq.n	8003026 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffa:	f7fe fac9 	bl	8001590 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003000:	e00a      	b.n	8003018 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003002:	f7fe fac5 	bl	8001590 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003010:	4293      	cmp	r3, r2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e0ab      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003018:	4b57      	ldr	r3, [pc, #348]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0ee      	beq.n	8003002 <HAL_RCC_OscConfig+0x37e>
 8003024:	e014      	b.n	8003050 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003026:	f7fe fab3 	bl	8001590 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302c:	e00a      	b.n	8003044 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302e:	f7fe faaf 	bl	8001590 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f241 3288 	movw	r2, #5000	; 0x1388
 800303c:	4293      	cmp	r3, r2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e095      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003044:	4b4c      	ldr	r3, [pc, #304]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1ee      	bne.n	800302e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003050:	7dfb      	ldrb	r3, [r7, #23]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d105      	bne.n	8003062 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003056:	4b48      	ldr	r3, [pc, #288]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	4a47      	ldr	r2, [pc, #284]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 800305c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003060:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 8081 	beq.w	800316e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800306c:	4b42      	ldr	r3, [pc, #264]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	2b08      	cmp	r3, #8
 8003076:	d061      	beq.n	800313c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	2b02      	cmp	r3, #2
 800307e:	d146      	bne.n	800310e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003080:	4b3f      	ldr	r3, [pc, #252]	; (8003180 <HAL_RCC_OscConfig+0x4fc>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003086:	f7fe fa83 	bl	8001590 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308e:	f7fe fa7f 	bl	8001590 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e067      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a0:	4b35      	ldr	r3, [pc, #212]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f0      	bne.n	800308e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b4:	d108      	bne.n	80030c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030b6:	4b30      	ldr	r3, [pc, #192]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	492d      	ldr	r1, [pc, #180]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030c8:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a19      	ldr	r1, [r3, #32]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	430b      	orrs	r3, r1
 80030da:	4927      	ldr	r1, [pc, #156]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e0:	4b27      	ldr	r3, [pc, #156]	; (8003180 <HAL_RCC_OscConfig+0x4fc>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e6:	f7fe fa53 	bl	8001590 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ee:	f7fe fa4f 	bl	8001590 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e037      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003100:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x46a>
 800310c:	e02f      	b.n	800316e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310e:	4b1c      	ldr	r3, [pc, #112]	; (8003180 <HAL_RCC_OscConfig+0x4fc>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fe fa3c 	bl	8001590 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311c:	f7fe fa38 	bl	8001590 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e020      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x498>
 800313a:	e018      	b.n	800316e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e013      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	429a      	cmp	r2, r3
 800315a:	d106      	bne.n	800316a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d001      	beq.n	800316e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021000 	.word	0x40021000
 800317c:	40007000 	.word	0x40007000
 8003180:	42420060 	.word	0x42420060

08003184 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0d0      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003198:	4b6a      	ldr	r3, [pc, #424]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d910      	bls.n	80031c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a6:	4b67      	ldr	r3, [pc, #412]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 0207 	bic.w	r2, r3, #7
 80031ae:	4965      	ldr	r1, [pc, #404]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b6:	4b63      	ldr	r3, [pc, #396]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0b8      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d020      	beq.n	8003216 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e0:	4b59      	ldr	r3, [pc, #356]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4a58      	ldr	r2, [pc, #352]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80031e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f8:	4b53      	ldr	r3, [pc, #332]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4a52      	ldr	r2, [pc, #328]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80031fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003202:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003204:	4b50      	ldr	r3, [pc, #320]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	494d      	ldr	r1, [pc, #308]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	4313      	orrs	r3, r2
 8003214:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d040      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d107      	bne.n	800323a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322a:	4b47      	ldr	r3, [pc, #284]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d115      	bne.n	8003262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e07f      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d107      	bne.n	8003252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003242:	4b41      	ldr	r3, [pc, #260]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d109      	bne.n	8003262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e073      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003252:	4b3d      	ldr	r3, [pc, #244]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e06b      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003262:	4b39      	ldr	r3, [pc, #228]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f023 0203 	bic.w	r2, r3, #3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4936      	ldr	r1, [pc, #216]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	4313      	orrs	r3, r2
 8003272:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003274:	f7fe f98c 	bl	8001590 <HAL_GetTick>
 8003278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327a:	e00a      	b.n	8003292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800327c:	f7fe f988 	bl	8001590 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f241 3288 	movw	r2, #5000	; 0x1388
 800328a:	4293      	cmp	r3, r2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e053      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003292:	4b2d      	ldr	r3, [pc, #180]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 020c 	and.w	r2, r3, #12
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d1eb      	bne.n	800327c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032a4:	4b27      	ldr	r3, [pc, #156]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d210      	bcs.n	80032d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b2:	4b24      	ldr	r3, [pc, #144]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 0207 	bic.w	r2, r3, #7
 80032ba:	4922      	ldr	r1, [pc, #136]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	4313      	orrs	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c2:	4b20      	ldr	r3, [pc, #128]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e032      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e0:	4b19      	ldr	r3, [pc, #100]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4916      	ldr	r1, [pc, #88]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d009      	beq.n	8003312 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032fe:	4b12      	ldr	r3, [pc, #72]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	490e      	ldr	r1, [pc, #56]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 800330e:	4313      	orrs	r3, r2
 8003310:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003312:	f000 f821 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8003316:	4601      	mov	r1, r0
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	4a0a      	ldr	r2, [pc, #40]	; (800334c <HAL_RCC_ClockConfig+0x1c8>)
 8003324:	5cd3      	ldrb	r3, [r2, r3]
 8003326:	fa21 f303 	lsr.w	r3, r1, r3
 800332a:	4a09      	ldr	r2, [pc, #36]	; (8003350 <HAL_RCC_ClockConfig+0x1cc>)
 800332c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800332e:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_RCC_ClockConfig+0x1d0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe f8ea 	bl	800150c <HAL_InitTick>

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40022000 	.word	0x40022000
 8003348:	40021000 	.word	0x40021000
 800334c:	08003d68 	.word	0x08003d68
 8003350:	20000000 	.word	0x20000000
 8003354:	20000004 	.word	0x20000004

08003358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003358:	b490      	push	{r4, r7}
 800335a:	b08a      	sub	sp, #40	; 0x28
 800335c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800335e:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003360:	1d3c      	adds	r4, r7, #4
 8003362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003368:	4b28      	ldr	r3, [pc, #160]	; (800340c <HAL_RCC_GetSysClockFreq+0xb4>)
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	2300      	movs	r3, #0
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	2300      	movs	r3, #0
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003382:	4b23      	ldr	r3, [pc, #140]	; (8003410 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b04      	cmp	r3, #4
 8003390:	d002      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x40>
 8003392:	2b08      	cmp	r3, #8
 8003394:	d003      	beq.n	800339e <HAL_RCC_GetSysClockFreq+0x46>
 8003396:	e02d      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003398:	4b1e      	ldr	r3, [pc, #120]	; (8003414 <HAL_RCC_GetSysClockFreq+0xbc>)
 800339a:	623b      	str	r3, [r7, #32]
      break;
 800339c:	e02d      	b.n	80033fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	0c9b      	lsrs	r3, r3, #18
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033aa:	4413      	add	r3, r2
 80033ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d013      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033bc:	4b14      	ldr	r3, [pc, #80]	; (8003410 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	0c5b      	lsrs	r3, r3, #17
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033ca:	4413      	add	r3, r2
 80033cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	4a0f      	ldr	r2, [pc, #60]	; (8003414 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033d6:	fb02 f203 	mul.w	r2, r2, r3
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
 80033e2:	e004      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	4a0c      	ldr	r2, [pc, #48]	; (8003418 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033e8:	fb02 f303 	mul.w	r3, r2, r3
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	623b      	str	r3, [r7, #32]
      break;
 80033f2:	e002      	b.n	80033fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033f4:	4b07      	ldr	r3, [pc, #28]	; (8003414 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033f6:	623b      	str	r3, [r7, #32]
      break;
 80033f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033fa:	6a3b      	ldr	r3, [r7, #32]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3728      	adds	r7, #40	; 0x28
 8003400:	46bd      	mov	sp, r7
 8003402:	bc90      	pop	{r4, r7}
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	08003d40 	.word	0x08003d40
 800340c:	08003d50 	.word	0x08003d50
 8003410:	40021000 	.word	0x40021000
 8003414:	007a1200 	.word	0x007a1200
 8003418:	003d0900 	.word	0x003d0900

0800341c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003420:	4b02      	ldr	r3, [pc, #8]	; (800342c <HAL_RCC_GetHCLKFreq+0x10>)
 8003422:	681b      	ldr	r3, [r3, #0]
}
 8003424:	4618      	mov	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr
 800342c:	20000000 	.word	0x20000000

08003430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003434:	f7ff fff2 	bl	800341c <HAL_RCC_GetHCLKFreq>
 8003438:	4601      	mov	r1, r0
 800343a:	4b05      	ldr	r3, [pc, #20]	; (8003450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	0a1b      	lsrs	r3, r3, #8
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	4a03      	ldr	r2, [pc, #12]	; (8003454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003446:	5cd3      	ldrb	r3, [r2, r3]
 8003448:	fa21 f303 	lsr.w	r3, r1, r3
}
 800344c:	4618      	mov	r0, r3
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40021000 	.word	0x40021000
 8003454:	08003d78 	.word	0x08003d78

08003458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800345c:	f7ff ffde 	bl	800341c <HAL_RCC_GetHCLKFreq>
 8003460:	4601      	mov	r1, r0
 8003462:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	0adb      	lsrs	r3, r3, #11
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	4a03      	ldr	r2, [pc, #12]	; (800347c <HAL_RCC_GetPCLK2Freq+0x24>)
 800346e:	5cd3      	ldrb	r3, [r2, r3]
 8003470:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003474:	4618      	mov	r0, r3
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40021000 	.word	0x40021000
 800347c:	08003d78 	.word	0x08003d78

08003480 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003488:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <RCC_Delay+0x34>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <RCC_Delay+0x38>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	0a5b      	lsrs	r3, r3, #9
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	fb02 f303 	mul.w	r3, r2, r3
 800349a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800349c:	bf00      	nop
  }
  while (Delay --);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1e5a      	subs	r2, r3, #1
 80034a2:	60fa      	str	r2, [r7, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f9      	bne.n	800349c <RCC_Delay+0x1c>
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	20000000 	.word	0x20000000
 80034b8:	10624dd3 	.word	0x10624dd3

080034bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	2300      	movs	r3, #0
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d07d      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80034d8:	2300      	movs	r3, #0
 80034da:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034dc:	4b4f      	ldr	r3, [pc, #316]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10d      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e8:	4b4c      	ldr	r3, [pc, #304]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	4a4b      	ldr	r2, [pc, #300]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f2:	61d3      	str	r3, [r2, #28]
 80034f4:	4b49      	ldr	r3, [pc, #292]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003500:	2301      	movs	r3, #1
 8003502:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003504:	4b46      	ldr	r3, [pc, #280]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350c:	2b00      	cmp	r3, #0
 800350e:	d118      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003510:	4b43      	ldr	r3, [pc, #268]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a42      	ldr	r2, [pc, #264]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800351a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800351c:	f7fe f838 	bl	8001590 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003522:	e008      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003524:	f7fe f834 	bl	8001590 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b64      	cmp	r3, #100	; 0x64
 8003530:	d901      	bls.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e06d      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003536:	4b3a      	ldr	r3, [pc, #232]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003542:	4b36      	ldr	r3, [pc, #216]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800354a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d02e      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	429a      	cmp	r2, r3
 800355e:	d027      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003560:	4b2e      	ldr	r3, [pc, #184]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003568:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800356a:	4b2e      	ldr	r3, [pc, #184]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800356c:	2201      	movs	r2, #1
 800356e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003570:	4b2c      	ldr	r3, [pc, #176]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003576:	4a29      	ldr	r2, [pc, #164]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d014      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003586:	f7fe f803 	bl	8001590 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358c:	e00a      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358e:	f7fd ffff 	bl	8001590 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	f241 3288 	movw	r2, #5000	; 0x1388
 800359c:	4293      	cmp	r3, r2
 800359e:	d901      	bls.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e036      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a4:	4b1d      	ldr	r3, [pc, #116]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0ee      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035b0:	4b1a      	ldr	r3, [pc, #104]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	4917      	ldr	r1, [pc, #92]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035c2:	7dfb      	ldrb	r3, [r7, #23]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d105      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c8:	4b14      	ldr	r3, [pc, #80]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	4a13      	ldr	r2, [pc, #76]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035e0:	4b0e      	ldr	r3, [pc, #56]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	490b      	ldr	r1, [pc, #44]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d008      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035fe:	4b07      	ldr	r3, [pc, #28]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	4904      	ldr	r1, [pc, #16]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360c:	4313      	orrs	r3, r2
 800360e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	40007000 	.word	0x40007000
 8003624:	42420440 	.word	0x42420440

08003628 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003628:	b590      	push	{r4, r7, lr}
 800362a:	b08d      	sub	sp, #52	; 0x34
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003630:	4b55      	ldr	r3, [pc, #340]	; (8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003632:	f107 040c 	add.w	r4, r7, #12
 8003636:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003638:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800363c:	4b53      	ldr	r3, [pc, #332]	; (800378c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
 8003646:	2300      	movs	r3, #0
 8003648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800364a:	2300      	movs	r3, #0
 800364c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
 8003652:	2300      	movs	r3, #0
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b02      	cmp	r3, #2
 800365a:	d07f      	beq.n	800375c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800365c:	2b10      	cmp	r3, #16
 800365e:	d002      	beq.n	8003666 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003660:	2b01      	cmp	r3, #1
 8003662:	d048      	beq.n	80036f6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003664:	e08b      	b.n	800377e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003666:	4b4a      	ldr	r3, [pc, #296]	; (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800366c:	4b48      	ldr	r3, [pc, #288]	; (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d07f      	beq.n	8003778 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	0c9b      	lsrs	r3, r3, #18
 800367c:	f003 030f 	and.w	r3, r3, #15
 8003680:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003684:	4413      	add	r3, r2
 8003686:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800368a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d018      	beq.n	80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003696:	4b3e      	ldr	r3, [pc, #248]	; (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	0c5b      	lsrs	r3, r3, #17
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80036a4:	4413      	add	r3, r2
 80036a6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00d      	beq.n	80036d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80036b6:	4a37      	ldr	r2, [pc, #220]	; (8003794 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	fb02 f303 	mul.w	r3, r2, r3
 80036c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c6:	e004      	b.n	80036d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	4a33      	ldr	r2, [pc, #204]	; (8003798 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80036cc:	fb02 f303 	mul.w	r3, r2, r3
 80036d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80036d2:	4b2f      	ldr	r3, [pc, #188]	; (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036de:	d102      	bne.n	80036e6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80036e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036e4:	e048      	b.n	8003778 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80036e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	4a2c      	ldr	r2, [pc, #176]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80036ec:	fba2 2303 	umull	r2, r3, r2, r3
 80036f0:	085b      	lsrs	r3, r3, #1
 80036f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036f4:	e040      	b.n	8003778 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80036f6:	4b26      	ldr	r3, [pc, #152]	; (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003706:	d108      	bne.n	800371a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003716:	62bb      	str	r3, [r7, #40]	; 0x28
 8003718:	e01f      	b.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003724:	d109      	bne.n	800373a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003726:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003732:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28
 8003738:	e00f      	b.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003740:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003744:	d11a      	bne.n	800377c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003746:	4b12      	ldr	r3, [pc, #72]	; (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d014      	beq.n	800377c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003752:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003756:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003758:	e010      	b.n	800377c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800375a:	e00f      	b.n	800377c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800375c:	f7ff fe7c 	bl	8003458 <HAL_RCC_GetPCLK2Freq>
 8003760:	4602      	mov	r2, r0
 8003762:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	0b9b      	lsrs	r3, r3, #14
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	3301      	adds	r3, #1
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003776:	e002      	b.n	800377e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003778:	bf00      	nop
 800377a:	e000      	b.n	800377e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800377c:	bf00      	nop
    }
  }
  return (frequency);
 800377e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003780:	4618      	mov	r0, r3
 8003782:	3734      	adds	r7, #52	; 0x34
 8003784:	46bd      	mov	sp, r7
 8003786:	bd90      	pop	{r4, r7, pc}
 8003788:	08003d54 	.word	0x08003d54
 800378c:	08003d64 	.word	0x08003d64
 8003790:	40021000 	.word	0x40021000
 8003794:	007a1200 	.word	0x007a1200
 8003798:	003d0900 	.word	0x003d0900
 800379c:	aaaaaaab 	.word	0xaaaaaaab

080037a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e041      	b.n	8003836 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fd fe16 	bl	80013f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3304      	adds	r3, #4
 80037dc:	4619      	mov	r1, r3
 80037de:	4610      	mov	r0, r2
 80037e0:	f000 f8e4 	bl	80039ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b084      	sub	sp, #16
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_TIM_ConfigClockSource+0x18>
 8003852:	2302      	movs	r3, #2
 8003854:	e0a6      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x166>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003874:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800387c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b40      	cmp	r3, #64	; 0x40
 800388c:	d067      	beq.n	800395e <HAL_TIM_ConfigClockSource+0x120>
 800388e:	2b40      	cmp	r3, #64	; 0x40
 8003890:	d80b      	bhi.n	80038aa <HAL_TIM_ConfigClockSource+0x6c>
 8003892:	2b10      	cmp	r3, #16
 8003894:	d073      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x140>
 8003896:	2b10      	cmp	r3, #16
 8003898:	d802      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x62>
 800389a:	2b00      	cmp	r3, #0
 800389c:	d06f      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800389e:	e078      	b.n	8003992 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	d06c      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x140>
 80038a4:	2b30      	cmp	r3, #48	; 0x30
 80038a6:	d06a      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x140>
      break;
 80038a8:	e073      	b.n	8003992 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038aa:	2b70      	cmp	r3, #112	; 0x70
 80038ac:	d00d      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0x8c>
 80038ae:	2b70      	cmp	r3, #112	; 0x70
 80038b0:	d804      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x7e>
 80038b2:	2b50      	cmp	r3, #80	; 0x50
 80038b4:	d033      	beq.n	800391e <HAL_TIM_ConfigClockSource+0xe0>
 80038b6:	2b60      	cmp	r3, #96	; 0x60
 80038b8:	d041      	beq.n	800393e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80038ba:	e06a      	b.n	8003992 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c0:	d066      	beq.n	8003990 <HAL_TIM_ConfigClockSource+0x152>
 80038c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c6:	d017      	beq.n	80038f8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80038c8:	e063      	b.n	8003992 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6899      	ldr	r1, [r3, #8]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f000 f940 	bl	8003b5e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	609a      	str	r2, [r3, #8]
      break;
 80038f6:	e04c      	b.n	8003992 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	6899      	ldr	r1, [r3, #8]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f000 f929 	bl	8003b5e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800391a:	609a      	str	r2, [r3, #8]
      break;
 800391c:	e039      	b.n	8003992 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6859      	ldr	r1, [r3, #4]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	461a      	mov	r2, r3
 800392c:	f000 f8a0 	bl	8003a70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2150      	movs	r1, #80	; 0x50
 8003936:	4618      	mov	r0, r3
 8003938:	f000 f8f7 	bl	8003b2a <TIM_ITRx_SetConfig>
      break;
 800393c:	e029      	b.n	8003992 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	6859      	ldr	r1, [r3, #4]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	461a      	mov	r2, r3
 800394c:	f000 f8be 	bl	8003acc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2160      	movs	r1, #96	; 0x60
 8003956:	4618      	mov	r0, r3
 8003958:	f000 f8e7 	bl	8003b2a <TIM_ITRx_SetConfig>
      break;
 800395c:	e019      	b.n	8003992 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6859      	ldr	r1, [r3, #4]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	461a      	mov	r2, r3
 800396c:	f000 f880 	bl	8003a70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2140      	movs	r1, #64	; 0x40
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f8d7 	bl	8003b2a <TIM_ITRx_SetConfig>
      break;
 800397c:	e009      	b.n	8003992 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4619      	mov	r1, r3
 8003988:	4610      	mov	r0, r2
 800398a:	f000 f8ce 	bl	8003b2a <TIM_ITRx_SetConfig>
        break;
 800398e:	e000      	b.n	8003992 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003990:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a29      	ldr	r2, [pc, #164]	; (8003a64 <TIM_Base_SetConfig+0xb8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00b      	beq.n	80039dc <TIM_Base_SetConfig+0x30>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ca:	d007      	beq.n	80039dc <TIM_Base_SetConfig+0x30>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a26      	ldr	r2, [pc, #152]	; (8003a68 <TIM_Base_SetConfig+0xbc>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d003      	beq.n	80039dc <TIM_Base_SetConfig+0x30>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a25      	ldr	r2, [pc, #148]	; (8003a6c <TIM_Base_SetConfig+0xc0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d108      	bne.n	80039ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a1c      	ldr	r2, [pc, #112]	; (8003a64 <TIM_Base_SetConfig+0xb8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00b      	beq.n	8003a0e <TIM_Base_SetConfig+0x62>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039fc:	d007      	beq.n	8003a0e <TIM_Base_SetConfig+0x62>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a19      	ldr	r2, [pc, #100]	; (8003a68 <TIM_Base_SetConfig+0xbc>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d003      	beq.n	8003a0e <TIM_Base_SetConfig+0x62>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a18      	ldr	r2, [pc, #96]	; (8003a6c <TIM_Base_SetConfig+0xc0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d108      	bne.n	8003a20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a07      	ldr	r2, [pc, #28]	; (8003a64 <TIM_Base_SetConfig+0xb8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d103      	bne.n	8003a54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	615a      	str	r2, [r3, #20]
}
 8003a5a:	bf00      	nop
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr
 8003a64:	40012c00 	.word	0x40012c00
 8003a68:	40000400 	.word	0x40000400
 8003a6c:	40000800 	.word	0x40000800

08003a70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	f023 0201 	bic.w	r2, r3, #1
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f023 030a 	bic.w	r3, r3, #10
 8003aac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	621a      	str	r2, [r3, #32]
}
 8003ac2:	bf00      	nop
 8003ac4:	371c      	adds	r7, #28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr

08003acc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f023 0210 	bic.w	r2, r3, #16
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003af6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	031b      	lsls	r3, r3, #12
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	621a      	str	r2, [r3, #32]
}
 8003b20:	bf00      	nop
 8003b22:	371c      	adds	r7, #28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b085      	sub	sp, #20
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f043 0307 	orr.w	r3, r3, #7
 8003b4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	609a      	str	r2, [r3, #8]
}
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr

08003b5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b087      	sub	sp, #28
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
 8003b6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	021a      	lsls	r2, r3, #8
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	431a      	orrs	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	609a      	str	r2, [r3, #8]
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e046      	b.n	8003c42 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a16      	ldr	r2, [pc, #88]	; (8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d00e      	beq.n	8003c16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c00:	d009      	beq.n	8003c16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a12      	ldr	r2, [pc, #72]	; (8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d004      	beq.n	8003c16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a10      	ldr	r2, [pc, #64]	; (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d10c      	bne.n	8003c30 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr
 8003c4c:	40012c00 	.word	0x40012c00
 8003c50:	40000400 	.word	0x40000400
 8003c54:	40000800 	.word	0x40000800

08003c58 <roundf>:
 8003c58:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8003c5c:	3b7f      	subs	r3, #127	; 0x7f
 8003c5e:	2b16      	cmp	r3, #22
 8003c60:	b510      	push	{r4, lr}
 8003c62:	4601      	mov	r1, r0
 8003c64:	dc14      	bgt.n	8003c90 <roundf+0x38>
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	da07      	bge.n	8003c7a <roundf+0x22>
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 8003c70:	d101      	bne.n	8003c76 <roundf+0x1e>
 8003c72:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 8003c76:	4608      	mov	r0, r1
 8003c78:	bd10      	pop	{r4, pc}
 8003c7a:	4a08      	ldr	r2, [pc, #32]	; (8003c9c <roundf+0x44>)
 8003c7c:	411a      	asrs	r2, r3
 8003c7e:	4210      	tst	r0, r2
 8003c80:	d0f9      	beq.n	8003c76 <roundf+0x1e>
 8003c82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c86:	4119      	asrs	r1, r3
 8003c88:	4401      	add	r1, r0
 8003c8a:	ea21 0102 	bic.w	r1, r1, r2
 8003c8e:	e7f2      	b.n	8003c76 <roundf+0x1e>
 8003c90:	2b80      	cmp	r3, #128	; 0x80
 8003c92:	d1f0      	bne.n	8003c76 <roundf+0x1e>
 8003c94:	f7fc fca4 	bl	80005e0 <__addsf3>
 8003c98:	4601      	mov	r1, r0
 8003c9a:	e7ec      	b.n	8003c76 <roundf+0x1e>
 8003c9c:	007fffff 	.word	0x007fffff

08003ca0 <__libc_init_array>:
 8003ca0:	b570      	push	{r4, r5, r6, lr}
 8003ca2:	2500      	movs	r5, #0
 8003ca4:	4e0c      	ldr	r6, [pc, #48]	; (8003cd8 <__libc_init_array+0x38>)
 8003ca6:	4c0d      	ldr	r4, [pc, #52]	; (8003cdc <__libc_init_array+0x3c>)
 8003ca8:	1ba4      	subs	r4, r4, r6
 8003caa:	10a4      	asrs	r4, r4, #2
 8003cac:	42a5      	cmp	r5, r4
 8003cae:	d109      	bne.n	8003cc4 <__libc_init_array+0x24>
 8003cb0:	f000 f82e 	bl	8003d10 <_init>
 8003cb4:	2500      	movs	r5, #0
 8003cb6:	4e0a      	ldr	r6, [pc, #40]	; (8003ce0 <__libc_init_array+0x40>)
 8003cb8:	4c0a      	ldr	r4, [pc, #40]	; (8003ce4 <__libc_init_array+0x44>)
 8003cba:	1ba4      	subs	r4, r4, r6
 8003cbc:	10a4      	asrs	r4, r4, #2
 8003cbe:	42a5      	cmp	r5, r4
 8003cc0:	d105      	bne.n	8003cce <__libc_init_array+0x2e>
 8003cc2:	bd70      	pop	{r4, r5, r6, pc}
 8003cc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cc8:	4798      	blx	r3
 8003cca:	3501      	adds	r5, #1
 8003ccc:	e7ee      	b.n	8003cac <__libc_init_array+0xc>
 8003cce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cd2:	4798      	blx	r3
 8003cd4:	3501      	adds	r5, #1
 8003cd6:	e7f2      	b.n	8003cbe <__libc_init_array+0x1e>
 8003cd8:	08003d80 	.word	0x08003d80
 8003cdc:	08003d80 	.word	0x08003d80
 8003ce0:	08003d80 	.word	0x08003d80
 8003ce4:	08003d84 	.word	0x08003d84

08003ce8 <memcpy>:
 8003ce8:	b510      	push	{r4, lr}
 8003cea:	1e43      	subs	r3, r0, #1
 8003cec:	440a      	add	r2, r1
 8003cee:	4291      	cmp	r1, r2
 8003cf0:	d100      	bne.n	8003cf4 <memcpy+0xc>
 8003cf2:	bd10      	pop	{r4, pc}
 8003cf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cfc:	e7f7      	b.n	8003cee <memcpy+0x6>

08003cfe <memset>:
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4402      	add	r2, r0
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d100      	bne.n	8003d08 <memset+0xa>
 8003d06:	4770      	bx	lr
 8003d08:	f803 1b01 	strb.w	r1, [r3], #1
 8003d0c:	e7f9      	b.n	8003d02 <memset+0x4>
	...

08003d10 <_init>:
 8003d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d12:	bf00      	nop
 8003d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d16:	bc08      	pop	{r3}
 8003d18:	469e      	mov	lr, r3
 8003d1a:	4770      	bx	lr

08003d1c <_fini>:
 8003d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1e:	bf00      	nop
 8003d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d22:	bc08      	pop	{r3}
 8003d24:	469e      	mov	lr, r3
 8003d26:	4770      	bx	lr
